% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BMR_calculations.R
\name{cal_knee_point}
\alias{cal_knee_point}
\title{Calculate the knee point on the exponential curve using various approaches}
\usage{
cal_knee_point(df, xvar, yvar, p1_raw = NULL, p2_raw = NULL)
}
\arguments{
\item{df}{a tibble}

\item{xvar}{a character column name in the `df` to be the x-axis in the exponential curve}

\item{yvar}{a character column name in the `df` to be the y-axis in the exponential curve}

\item{p1_raw}{default = NULL, or a number to manually set the first threshold index for the distance approach using the raw y values}

\item{p2_raw}{default = NULL, or a number to manually set last threshold index for the distance approach the raw y values}
}
\value{
a list with two tibbles

\describe{
  \item{stats}{
  y_exp_fit, y_lm_fit: the fitted y values (exponential or linear)
  dist2l_exp, dist2l_raw: the calculated distance-to-line value based on fitted y values (exponential) or raw y values
  curvature: the calculated curvature value using smooth.spline fit results
  p1_raw, p2_raw: the index of points for the line using the raw y values
  }
  \item{outcome}{
  thresDist_raw: the identified threshold based on distance approach using the raw y values
  thresDist_exp: the identified threshold based on distance approach using the y values from the fitted exponential curve
  thresComment: the flag to suggest whether to use the thresDist (OK, cautionary, check)
  p1_raw, p2_raw: the index of points for the line using the raw y values
  cor_exp_fit, cor_lm_fit: the Pearson's correlation between the fitted y values (exponential or linear) and the raw y values
  }
}
}
\description{
Calculate the knee point on the exponential curve using various approaches
}
\examples{
data("zfishdev_act")
acts <- zfishdev_act \%>\% mutate(POD = ifelse(is.na(POD), conc_highest, POD))
outthres <- identify_basenoise_threshold(acts)[["stats"]]

outthres2 <- outthres \%>\%
nest(-endpoint, -direction) \%>\%
mutate(
knee_out = purrr::map(data, function(x) cal_knee_point(x, "threshold", "pooled_variance"))
)

}
