[{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"set-up-the-packages","dir":"Articles","previous_headings":"","what":"Set up the packages","title":"Parallel Computing Examples Using Rcurvep","text":"","code":"library(future) library(furrr) library(dplyr) library(purrr) #library(microbenchmark) # it is needed if recalculating the comparison library(Rcurvep)"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"datasets-from-rcurvep-package","dir":"Articles","previous_headings":"","what":"datasets from Rcurvep package","title":"Parallel Computing Examples Using Rcurvep","text":"","code":"data(\"zfishdev_all\") # two endpoints, each endpoint includes 32 chemicals/curves data(\"zfishdev_act\") # simulated curves based on zfishdev_all, each chemical has 100 simulated curves data(\"zfishdev\") # four endpoints, each endpoint includes 3 chemicals/curves"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"when-no-preferred-bmr-and-would-like-to-do-a-exhaustive-search","dir":"Articles","previous_headings":"","what":"When no preferred BMR and would like to do a exhaustive search","title":"Parallel Computing Examples Using Rcurvep","text":"computationally intensive procedure. n_sample = 100 preferred demonstration, n_sample = 10 used. Expressions used delay execution commands. combi_run_rcurvep function, future_pmap function furrr package embedded. Use future::plan() control types calculation.","code":"# sequential run seq_run_multi <- expression(      # set up the plan   future::plan(sequential),      # calculation   combi_run_rcurvep(     zfishdev_all,      n_sample = 10,     TRSH = seq(5, 95, by = 5),     RNGE = 1000000,     keep_sets = \"act_set\",     seed = 300   ) )   # parallel run par_run_multi <- expression(      # set up the plan   future::plan(multisession, workers = 10),      # calculation   combi_run_rcurvep(     zfishdev_all,      n_sample = 10,     TRSH = seq(5, 95, by = 5),     RNGE = 1000000,     keep_sets = \"act_set\",     seed = 300   ),      # re-set the plan back   future::plan(sequential) )"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"calculate-10-times-and-compare-the-results","dir":"Articles","previous_headings":"","what":"Calculate 10 times and compare the results","title":"Parallel Computing Examples Using Rcurvep","text":"Due long time, results pasted . Parallel calculation faster.","code":"run_speed_multi_rcurvep <- microbenchmark(   eval(seq_run_multi),   eval(par_run_multi),   times = 10 ) #> run_speed_multi_rcurvep  #Unit: seconds #                expr      min       lq     mean   median       uq      max neval cld # eval(seq_run_multi) 70.97373 71.06332 73.85309 74.02031 75.58980 77.31413    10  a  # eval(par_run_multi) 22.73920 23.86592 24.80765 25.09510 25.36901 27.39045    10   b"},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"get-the-bmrs-for-each-endpoint","dir":"Articles","previous_headings":"When preferred BMRs are available for endpoints","what":"Get the BMRs for each endpoint","title":"Parallel Computing Examples Using Rcurvep","text":"","code":"bmr_out <- estimate_dataset_bmr(zfishdev_act, plot = FALSE) bmrd <- bmr_out$outcome"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"join-the-bmrs-to-the-concentration-response-data","dir":"Articles","previous_headings":"When preferred BMRs are available for endpoints","what":"Join the BMRs to the concentration-response data","title":"Parallel Computing Examples Using Rcurvep","text":"","code":"inp_tb <- bmrd |>   nest_join(     zfishdev_all, by = c(\"endpoint\"), keep = TRUE, name = \"data\"   ) |>   select(RNGE, endpoint, bmr_exp, data) # input_data for combi_run_rcurvep rmarkdown::paged_table(inp_tb)"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"set-up-the-expressions","dir":"Articles","previous_headings":"When preferred BMRs are available for endpoints","what":"Set up the expressions","title":"Parallel Computing Examples Using Rcurvep","text":"n_sample = 1000 preferred demonstration, n_sample = 100 used. combi_run_rcurvep function, future_pmap function furrr package embedded. Using future_pmap function unexpectedly decreased speed.","code":"# sequential run seq_run_bmr <- expression(   future::plan(sequential),   pmap(inp_tb, ~ combi_run_rcurvep(..4, TRSH = ..3, RNGE = ..1, n_samples = 100, seed = 300, keep_sets = c(\"act_set\"))) )  # parallel run par_run_bmr1 <- expression(      future::plan(multisession, workers = 10),      # calculation with no additional future_pmap   pmap(inp_tb, ~ combi_run_rcurvep(..4, TRSH = ..3, RNGE = ..1, n_samples = 100, seed = 300, keep_sets = c(\"act_set\"))),    future::plan(sequential) )   # parallel run par_run_bmr2 <- expression(      future::plan(multisession, workers = 10),      # calculation with additional future_pmap   future_pmap(inp_tb, ~ combi_run_rcurvep(..4, TRSH = ..3, RNGE = ..1, n_samples = 100, seed = 300, keep_sets = c(\"act_set\")), .options = furrr_options(seed = 300)),    future::plan(sequential) )"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"calculate-10-times-and-compare-the-results-1","dir":"Articles","previous_headings":"","what":"Calculate 10 times and compare the results","title":"Parallel Computing Examples Using Rcurvep","text":"Due long time, results pasted . Parallel calculation faster additional future_pmap used.","code":"run_speed_bmr_rcurvep <- microbenchmark(   eval(seq_run_bmr),   eval(par_run_bmr1),   eval(par_run_bmr2),   times = 10 ) #> run_speed_bmr_rcurvep #Unit: seconds #               expr      min       lq     mean   median       uq      max neval cld #  eval(seq_run_bmr) 39.29451 40.34472 42.08456 40.92504 44.08229 47.01601    10 a   # eval(par_run_bmr1) 17.66869 18.38648 18.89080 18.80669 19.20098 20.97384    10  b  # eval(par_run_bmr2) 24.38823 25.35811 25.46403 25.48099 25.83589 26.54293    10   c"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"fitting-based-on-simulated-curves-using-run_fit","dir":"Articles","previous_headings":"","what":"Fitting based on simulated curves using run_fit","title":"Parallel Computing Examples Using Rcurvep","text":"run_fit function, future_map function furrr package embedded. Use future::plan() control types calculation.","code":""},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"set-up-the-expressions-1","dir":"Articles","previous_headings":"Fitting based on simulated curves using run_fit","what":"Set up the expressions","title":"Parallel Computing Examples Using Rcurvep","text":"n_sample = 1000 preferred demonstration, n_sample = 100 used. Also, create_dataset function used convert incidence data response data.","code":"# sequential run seq_fit_hill_boot <- expression(      future::plan(sequential),   run_fit(create_dataset(zfishdev), hill_pdir = 1, n_samples = 100, modls = \"hill\")  )  # parallel run seq_fit_hill_boot <- expression(      future::plan(multisession, workers = 10),       # calculation   run_fit(create_dataset(zfishdev), hill_pdir = 1, n_samples = 100, modls = \"hill\"),   future::plan(sequential) )"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"calculate-10-times-and-compare-the-results-2","dir":"Articles","previous_headings":"","what":"Calculate 10 times and compare the results","title":"Parallel Computing Examples Using Rcurvep","text":"Due long time, results pasted . Parallel calculation faster.","code":"run_speed_fit_hill_boot <- microbenchmark(   eval(seq_fit_hill_boot),   eval(par_fit_hill_boot),   times = 10 ) #> run_speed_fit_hill_boot #Unit: seconds #               expr      min       lq     mean   median       uq      max neval # eval(seq_fit_hill_boot) 60.75111 63.42611 64.02762 63.97692 65.46656 66.83198    10 # eval(par_fit_hill_boot) 34.81743 36.88777 37.43076 37.41199 38.88405 39.40711    10"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"fitting-based-on-simulated-curves-using-run_fit-and-pmap","dir":"Articles","previous_headings":"","what":"Fitting based on simulated curves using run_fit and pmap","title":"Parallel Computing Examples Using Rcurvep","text":"can also use similar syntax combi_run_rcurvep run multiple datasets testing include include future_pmap.","code":"# make the incidence data as response data inp_tb_resp <- inp_tb |> mutate(data = map(data, create_dataset))  # sequential run seq_fit_hill_multi <- expression(   future::plan(sequential),   set.seed(2003),   pmap(inp_tb_resp, ~ run_fit(..4, modls = \"hill\", hill_pdir = ifelse(..3 < 0, -1, 1), n_samples = 100, keep_sets = c(\"fit_set\"))) )  # parallel run para_fit_hill_multi1 <- expression(   future::plan(multisession, workers = 10),    set.seed(2003),   # no future_pmap   pmap(inp_tb_resp, ~ run_fit(..4, modls = \"hill\", hill_pdir = ifelse(..3 < 0, -1, 1), n_samples = 100, keep_sets = c(\"fit_set\"))),      future::plan(sequential) )    # parallel run para_fit_hill_multi2 <- expression(   future::plan(multisession, workers = 10),       # with future_pmap   future_pmap(inp_tb_resp, ~ run_fit(..4, modls = \"hill\", hill_pdir = ifelse(..3 < 0, -1, 1), n_samples = 100, keep_sets = c(\"fit_set\")), .options = furrr_options(seed = 2023)),      future::plan(sequential) )"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"calculate-10-times-and-compare-the-results-3","dir":"Articles","previous_headings":"","what":"Calculate 10 times and compare the results","title":"Parallel Computing Examples Using Rcurvep","text":"Due long time, results pasted . Parallel calculation faster future_pmap function. possible future_map function used run_fit function.","code":"run_speed_fit_hill_multi <- microbenchmark(   eval(seq_fit_hill_multi),   eval(para_fit_hill_multi1),   eval(para_fit_hill_multi2),   times = 10 ) #> run_speed_fit_hill_multi #Unit: seconds #                       expr       min        lq      mean    median        uq       max neval cld # eval(seq_fit_hill_multi) 210.70736 211.45879 214.57743 212.88469 217.75672 222.96850    10 a   # eval(para_fit_hill_multi1)  95.43516  95.98258  96.56978  96.65905  97.00355  97.55148    10  b  # eval(para_fit_hill_multi2) 121.67944 122.25914 122.66318 122.80333 123.16349 123.24216    10   c"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"fitting-based-on-original-data","dir":"Articles","previous_headings":"","what":"Fitting based on original data","title":"Parallel Computing Examples Using Rcurvep","text":"run_fit function, future_map furrr package embedded. Use future::plan() control types calculation. Two parameters tested: hill cc2. hill 3-parameter Hill equation implemented using R. cc2 4-parameter Hill equation implemented using Java. dataset - respd_1 - includes 3000 curves, available package. dataset small, might worthwhile start parallel computing.","code":""},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"use-modls-hill-parameter","dir":"Articles","previous_headings":"Fitting based on original data","what":"Use modls = hill parameter","title":"Parallel Computing Examples Using Rcurvep","text":"","code":"# sequential run seq_fit_hill_ori <- expression(      future::plan(sequential),   run_fit(respd_1,  modls = \"hill\")  )  # parallel run par_fit_hill_ori <- expression(      future::plan(multisession, workers = 5),   run_fit(respd_1,  modls = \"hill\"),   future::plan(sequential) )"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"calculate-5-times-and-compare-the-results","dir":"Articles","previous_headings":"","what":"Calculate 5 times and compare the results","title":"Parallel Computing Examples Using Rcurvep","text":"Due long time, results pasted . Parallel calculation faster.","code":"run_speed_hit_hill_ori <- microbenchmark(   eval(seq_fit_hill_ori),   eval(par_fit_hill_ori),   times = 5 ) #> run_speed_hit_hill_ori #Unit: seconds #                   expr       min        lq      mean    median       uq       max neval # eval(seq_fit_hill_ori) 112.12160 112.30511 112.35622 112.40213 112.4308 112.52144     5 # eval(par_fit_hill_ori)  62.92156  63.04108  63.51158  63.60182  63.9130  64.08043     5"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"use-modls-cc2-parameter","dir":"Articles","previous_headings":"Calculate 5 times and compare the results","what":"Use modls = cc2 parameter","title":"Parallel Computing Examples Using Rcurvep","text":"","code":"# sequential run seq_fit_cc2 <- expression(      future::plan(sequential),   run_fit(respd_1,  modls = \"cc2\")  )  # parallel run par_fit_cc2 <- expression(      future::plan(multisession, workers = 5),   run_fit(respd_1,  modls = \"cc2\"),   future::plan(sequential) )"},{"path":"https://moggces.github.io/Rcurvep/articles/future_rcurvep.html","id":"calculate-5-times-and-compare-the-results-1","dir":"Articles","previous_headings":"","what":"Calculate 5 times and compare the results","title":"Parallel Computing Examples Using Rcurvep","text":"Due long time, results pasted . Parallel calculation improve much. cc2 implemented using Java.","code":"run_speed_fit_cc2 <- microbenchmark(   eval(seq_fit_cc2),   eval(par_fit_cc2),   times = 5 ) #> run_speed_fit_cc2 #Unit: seconds #              expr      min       lq     mean   median       uq      max neval # eval(seq_fit_cc2) 68.37777 68.39599 68.46936 68.45011 68.45746 68.66547     5 # eval(par_fit_cc2) 58.07689 58.31388 59.17766 59.01783 59.07421 61.40546     5"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"install-the-package","dir":"Articles","previous_headings":"","what":"Install the package","title":"Practical applications using Rcurvep package","text":"","code":"# the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"moggces/Rcurvep\") devtools::install_github(\"moggces/Rcurvep\", dependencies = TRUE, build_vignettes = TRUE)"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"load-the-library","dir":"Articles","previous_headings":"","what":"Load the library","title":"Practical applications using Rcurvep package","text":"","code":"library(Rcurvep)"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"load-the-sample-dataset","dir":"Articles","previous_headings":"","what":"Load the sample dataset","title":"Practical applications using Rcurvep package","text":"zfishdev subset data 32-compound screen using zebrafish developmental assays. goal decide whether compound active particular toxicity endpoint. active determined responses monotonic (increase concentration). addition, maximum response larger certain response threshold.","code":"# More details of the dataset can be found ?zfishdev. data(zfishdev)  str(zfishdev) #> Classes 'tbl_df', 'tbl' and 'data.frame':    96 obs. of  5 variables: #>  $ endpoint: chr  \"percent_affected_48\" \"percent_affected_48\" \"percent_affected_48\" \"percent_affected_48\" ... #>  $ chemical: chr  \"Caffeine|58-08-2\" \"Caffeine|58-08-2\" \"Caffeine|58-08-2\" \"Caffeine|58-08-2\" ... #>  $ conc    : num  -4 -3.82 -3.52 -3.3 -3.12 -3 -2.82 -2.7 -7 -6.52 ... #>  $ n_in    : int  0 2 5 15 15 15 15 15 0 2 ... #>  $ N       : int  15 15 15 15 15 15 15 15 15 15 ..."},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"rcurvep-method","dir":"Articles","previous_headings":"","what":"Rcurvep method","title":"Practical applications using Rcurvep package","text":"Rcurvep tool decide whether responses monotonic (increase concentration) based set pre-defined parameters. default setting parameters can obtained curvep_defaults(). TRSH threshold parameter, , responses considered noise. threshold particularly important toxicologists, since point--departure (POD) can defined concentration response equivalent threshold. threshold can also called benchmark response (BMR).","code":"curvep_defaults() #>  #> curvep configuration parameters #>          TRSH:    [15] #>          RNGE:    [-1e+06] #>          MXDV:    [5] #>          CARR:    [0] #>          BSFT:    [3] #>          USHP:    [4] #>       TrustHi:    [TRUE] #>     StrictImp:    [TRUE] #>          DUMV:    [-999] #>          TLOG:    [-24] #>          seed:    [NA] #>  #For details of parameters, see ?curvep."},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"run-rcurvep-on-datasets-using-combi_run_rcurvep","dir":"Articles","previous_headings":"","what":"Run Rcurvep on datasets using combi_run_rcurvep()","title":"Practical applications using Rcurvep package","text":"Since zfishdev contain column responses, create_dataset() can used generate responses particular type data. However, function already incorporated.","code":"identical(   combi_run_rcurvep(zfishdev, RNGE = 1000000),   combi_run_rcurvep(create_dataset(zfishdev), RNGE = 1000000) ) #> [1] TRUE"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"run-rcurvep-when-there-is-a-preferred-bmr","dir":"Articles","previous_headings":"","what":"Run Rcurvep when there is a preferred BMR","title":"Practical applications using Rcurvep package","text":"preferred BMR, can run dataset using threshold. act_set result contains potency efficacy information concentration-response data (aka curve).","code":"out <- combi_run_rcurvep(   zfishdev,   TRSH = 25, # BMR = 25   RNGE = 1000000 # increasing direction ) out #>  #> 4 endpoint(s) and 3 chemical(s) #> Components in the list: result, config #> Components in the result: act_set, resp_set, fp_set #>  out$config #>  #> curvep configuration parameters #>          TRSH:    [25] #>          RNGE:    [1e+06] #>          MXDV:    [5] #>          CARR:    [0] #>          BSFT:    [3] #>          USHP:    [4] #>       TrustHi:    [TRUE] #>     StrictImp:    [TRUE] #>          DUMV:    [-999] #>          TLOG:    [-24] #>          seed:    [NA] #>"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"summarize-activity-data-from-rcurvep","dir":"Articles","previous_headings":"","what":"Summarize activity data from Rcurvep","title":"Practical applications using Rcurvep package","text":"results summary saved tibble, act_summary.","code":"sum_out <- summarize_rcurvep_output(out) sum_out #>  #> 4 endpoint(s) and 3 chemical(s) #> Components in the list: result, config, act_summary #> Components in the result: act_set, resp_set, fp_set #>"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"add-confidence-interval-for-activity-data-from-rcurvep","dir":"Articles","previous_headings":"","what":"Add confidence interval for activity data from Rcurvep","title":"Practical applications using Rcurvep package","text":"confidence interval calculated using simulated datasets created bootstrapping original responses. setting parameter, n_samples, number curves simulated. summarize_rcurvep_output() can used summarize results.","code":"set.seed(300) out <- combi_run_rcurvep(   zfishdev,   n_samples = 10, # often 1000 samples are preferred   TRSH = 25,   RNGE = 1000000,   keep_sets = \"act_set\" ) sum_out <- summarize_rcurvep_output(out) sum_out #>  #> 4 endpoint(s) and 3 chemical(s) #> Components in the list: result, config, act_summary #> Components in the result: act_set #>"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"run-rcurvep-when-an-optimalpreferred-bmr-is-unknown","dir":"Articles","previous_headings":"","what":"Run Rcurvep when an optimal/preferred BMR is unknown","title":"Practical applications using Rcurvep package","text":"optimal BMR may defined threshold potency estimation accurate. concept can translated lowest threshold (gives highest potency), decrease variance potency estimation stabilized. using simulated datasets, pooled variance across chemicals certain threshold can estimated.","code":"# The combi_run_rcurvep() can be used for a combination of Curvep parameters.  # finishing the code will take some time.   set.seed(300) data(zfishdev_all)  zfishdev_act <- combi_run_rcurvep(      zfishdev_all,    n_samples = 100,    keep_sets = c(\"act_set\"),   TRSH = seq(5, 95, by = 5), # test all candidates, 5 to 95   RNGE = 1000000,    CARR = 20 )"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"estimate-the-bmr","dir":"Articles","previous_headings":"","what":"Estimate the BMR","title":"Practical applications using Rcurvep package","text":"two endpoints, BMR = 25 (bmr_ori column) suggested percent_affected_96 endpoint OK comment percent_mortality_96 endpoint, check noted.","code":"data(zfishdev_act) bmr_out <- estimate_dataset_bmr(zfishdev_act, plot = FALSE) bmr_out$outcome #> # A tibble: 2 × 12 #>      RNGE  CARR endpoint bmr_ori p1_ori p2_ori bmr_exp p1_exp p2_exp cor_exp_fit #>     <dbl> <dbl> <chr>      <dbl>  <int>  <int>   <dbl>  <int>  <int>       <dbl> #> 1 1000000    20 percent…      25      1     19      20      1     19       0.994 #> 2 1000000    20 percent…      55      6     19      50      1     19       0.789 #> # ℹ 2 more variables: cor_lm_fit <dbl>, qc <chr>"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"display-the-diagnostic-curves-for-bmr-estimation","dir":"Articles","previous_headings":"","what":"Display the diagnostic curves for BMR estimation","title":"Practical applications using Rcurvep package","text":"turns percent_mortality_96 endpoint, shape right form (percent_affected_96 endpoint).","code":"plot(bmr_out) #> $`1`"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"run-parametric-fitting-on-datasets","dir":"Articles","previous_headings":"","what":"Run parametric fitting on datasets","title":"Practical applications using Rcurvep package","text":"Since zfishdev contain column responses, create_dataset() needs used generate responses particular type data. Unlike combi_run_rcurvep(), create_dataset() called explicitly.","code":"# set the preferred direction as increasing hill_pdir = 1 # this is to use the 3-parameter hill  fitd1 <- run_fit(create_dataset(zfishdev), hill_pdir = 1, modls = \"hill\") fitd1 #>  #> 4 endpoint(s) and 3 chemical(s) #> Components in the list: result, result_nested #> Components in the result: fit_set, resp_set #>   # can also use the curve class2 4-parameter hill with classification SD as 5%  # please ?fit_cc2_modl to understand curve classification fitd2 <- run_fit(create_dataset(zfishdev), cc2_classSD = 5, modls = \"cc2\") fitd2  #>  #> 4 endpoint(s) and 3 chemical(s) #> Components in the list: result, result_nested #> Components in the result: fit_set, resp_set #>"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"summarize-parametric-fitting-results-using-a-preferred-bmr","dir":"Articles","previous_headings":"","what":"Summarize parametric fitting results using a preferred BMR","title":"Practical applications using Rcurvep package","text":"results summary saved tibble, act_summary.","code":"# thr_resp will get BMC10% and perc_resp will get EC20%   # hill with 3-parameter  fitd_sum_out1 <- summarize_fit_output(fitd1, thr_resp  = 10, perc_resp = 20, extract_only = TRUE)  # cc2 (hill with 4-parameter + curve classification) fitd_sum_out2 <- summarize_fit_output(fitd2, thr_resp  = 10, perc_resp = 20, extract_only = TRUE)"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"inspect-concordance-between-two-parametric-fits","dir":"Articles","previous_headings":"","what":"Inspect concordance between two parametric fits","title":"Practical applications using Rcurvep package","text":"","code":"#EC20% concordance (when both methods provide values) cor(fitd_sum_out1$result$act_set$ECxx, fitd_sum_out2$result$act_set$ECxx, use = \"pairwise.complete.obs\") #> [1] 0.9941618  #BMC10% (when both methods provide values) cor(fitd_sum_out1$result$act_set$POD, fitd_sum_out2$result$act_set$POD, use = \"pairwise.complete.obs\") #> [1] 0.9888046  #EC50 (when both methods provide values) cor(fitd_sum_out1$result$act_set$EC50, fitd_sum_out2$result$act_set$EC50, use = \"pairwise.complete.obs\") #> [1] 0.9994521   # check number of curves consider as active by both sum(fitd_sum_out1$result$act_set$hit == 0) # no fit #> [1] 7 sum(fitd_sum_out2$result$act_set$hit == 4) # cc2 = 4 (inactive) #> [1] 7"},{"path":"https://moggces.github.io/Rcurvep/articles/practical_rcurvep.html","id":"add-confidence-interval-for-activity-data-from-parametric-fitting-currently-is-only-available-to-3-parameter-hill-equation-from-tcpl","dir":"Articles","previous_headings":"","what":"Add confidence interval for activity data from parametric fitting (currently is only available to 3-parameter Hill equation from tcpl)","title":"Practical applications using Rcurvep package","text":"","code":"fitd <- run_fit(create_dataset(zfishdev), hill_pdir = 1, n_samples = 10, modls = \"hill\")"},{"path":"https://moggces.github.io/Rcurvep/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jui-Hua Hsieh. Author, maintainer. Alexander Sedykh. Author. Fred Parham. Contributor. Yuhong Wang. Contributor. Tongan Zhao. Author. Ruili Huang. Contributor.","code":""},{"path":"https://moggces.github.io/Rcurvep/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hsieh J, Sedykh , Zhao T (2025). Rcurvep: Concentration-Response Data Analysis using Curvep. R package version 1.3.2, https://moggces.github.io/Rcurvep, https://github.com/moggces/Rcurvep.","code":"@Manual{,   title = {Rcurvep: Concentration-Response Data Analysis using Curvep},   author = {Jui-Hua Hsieh and Alexander Sedykh and Tongan Zhao},   year = {2025},   note = {R package version 1.3.2, https://moggces.github.io/Rcurvep},   url = {https://github.com/moggces/Rcurvep}, }"},{"path":"https://moggces.github.io/Rcurvep/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Rcurvep","text":"package provides R interface processing concentration-response datasets using Curvep, response noise filtering algorithm. algorithm described publications (Sedykh et al. (2011) doi:10.1289/ehp.1002476 Sedykh (2016) doi:10.1007/978-1-4939-6346-1_14). parametric fitting approaches (e.g., Hill equation) also adopted ease comparison. 3-parameter Hill equation original tcpl package (Filer DL et al., doi:10.1093/bioinformatics/btw680) 4-parameter Hill equation Curve Class2 approach (Wang Y et al., doi:10.2174/1875397301004010057) available. Also, methods calculating confidence interval around activity metrics also provided. methods based bootstrap approach simulate datasets (Hsieh J-H et al. doi:10.1093/toxsci/kfy258). simulated datasets can used derive baseline noise threshold assay endpoint. threshold critical toxicological studies derive point--departure (POD).","code":""},{"path":"https://moggces.github.io/Rcurvep/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Rcurvep","text":"","code":"# the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"moggces/Rcurvep\") devtools::install_github(\"moggces/Rcurvep\", dependencies = TRUE, build_vignettes = TRUE)"},{"path":[]},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/index.html","id":"run-analysis","dir":"","previous_headings":"Usage","what":"Run analysis","title":"Rcurvep","text":"","code":"library(Rcurvep) data(\"zfishbeh\") out_curvep <- combi_run_rcurvep(zfishbeh, TRSH = 30)  # using Curvep with BMR = 30 out_fit1 <- run_fit(zfishbeh, modls = \"cc2\") # using Curve Class2 4-parameter hill out_fit2 <- run_fit(zfishbeh, modls = c(\"cnst\", \"hill\")) # using tcpl 3-parameter hill + constant model"},{"path":"https://moggces.github.io/Rcurvep/index.html","id":"find-bmr","dir":"","previous_headings":"Usage","what":"Find BMR","title":"Rcurvep","text":"","code":"data(\"zfishdev_act\") out_bmr <- estimate_dataset_bmr(zfishdev_act) ## $`1`"},{"path":"https://moggces.github.io/Rcurvep/index.html","id":"more-usage","dir":"","previous_headings":"","what":"More Usage","title":"Rcurvep","text":"learn Rcurvep, start vignettes: browseVignettes(package = \"Rcurvep\")","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/cal_knee_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the knee point on the exponential-like curve — cal_knee_point","title":"Calculate the knee point on the exponential-like curve — cal_knee_point","text":"Currently two methods implemented get \"keen-point\" variance(y) - threshold(x) curve. One use original y values draw straight line lowest x value (p1) highest x value (p2). knee-point x longest distance line. one fit data first use fitted responses analysis. Currently first method preferred.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/cal_knee_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the knee point on the exponential-like curve — cal_knee_point","text":"","code":"cal_knee_point(d, xaxis, yaxis, p1 = NULL, p2 = NULL, plot = TRUE)"},{"path":"https://moggces.github.io/Rcurvep/reference/cal_knee_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the knee point on the exponential-like curve — cal_knee_point","text":"d tibble. xaxis column name d x-axis exponential-like curve yaxis column name d y-axis exponential-like curve p1 Default = NULL, integer value manually set first index line. p2 Default = NULL, integer value manually set last index line. plot Default = TRUE, plot diagnostic plot.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/cal_knee_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the knee point on the exponential-like curve — cal_knee_point","text":"list two components: stats outcome. stats: tibble, including pooled variance (pvar), fitted responses (y_exp_fit, y_lm_fit), distance line (dist2l) outcome: tibble, including estimated BMRs (bmr) ; Suffix stats outcome tibble: \"ori\" (original values), \"exp\"(exponential fit). prefix outcome tibble, \"cor\" (correlation fitted responses original responses), \"bmr\" (benchmark response), \"qc\" (quality control).","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/cal_knee_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the knee point on the exponential-like curve — cal_knee_point","text":"","code":"inp <- data.frame( x = seq(5, 95, by = 5), y = c(0.0537, 0.0281, 0.0119, 0.0109, 0.0062, 0.0043, 0.0043, 0.0042, 0.0041, 0.0043, 0.0044, 0.0044, 0.0046, 0.0051, 0.0055, 0.0057, 0.0072, 0.0068, 0.0035))  out <- cal_knee_point(inp,\"x\", \"y\", plot = FALSE) plot(out) #> $`1` #> Warning: Removed 38 rows containing missing values or values outside the scale range #> (`geom_line()`).  #>"},{"path":"https://moggces.github.io/Rcurvep/reference/combi_run_rcurvep.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Curvep on datasets of concentration-response data with a combination of Curvep parameters — combi_run_rcurvep","title":"Run Curvep on datasets of concentration-response data with a combination of Curvep parameters — combi_run_rcurvep","text":"simplifies steps run_rcurvep() wrapping create_dataset() function.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/combi_run_rcurvep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Curvep on datasets of concentration-response data with a combination of Curvep parameters — combi_run_rcurvep","text":"","code":"combi_run_rcurvep(   d,   n_samples = NULL,   vdata = NULL,   mask = 0,   keep_sets = c(\"act_set\", \"resp_set\", \"fp_set\"),   ... )"},{"path":"https://moggces.github.io/Rcurvep/reference/combi_run_rcurvep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Curvep on datasets of concentration-response data with a combination of Curvep parameters — combi_run_rcurvep","text":"d Datasets concentration-response data. Examples zfishbeh zfishdev. n_samples NULL (default) simulate responses integer number indicate number responses per concentration simulate. vdata NULL (default) simulate responses vector numeric responses vehicle control wells use error. parameter works n_samples NULL; experimental feature. mask Default = 0, mask (values mask column 0). Use vector integers mask responses: 1 mask response highest concentration; 2 mask response second highest concentration, . mask column exists, setting ignored. keep_sets types output reported. Allowed values: act_set, resp_set, fp_set. Multiple values allowed. act_set must. act_set: activity data resp_set: response data fp_set: fingerprint data ... Curvep settings. See curvep_defaults() allowed parameters. can used overwrite default values.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/combi_run_rcurvep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Curvep on datasets of concentration-response data with a combination of Curvep parameters — combi_run_rcurvep","text":"rcurvep object. two components: result, config result component also list output sets depending parameter, keep_sets. config component curvep_config object. Often used columns act_set: AUC (area curve), wAUC (weighted AUC), POD (point--departure), EC50 (Half maximal effective concentration), nCorrected (number corrected points).","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/combi_run_rcurvep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Curvep on datasets of concentration-response data with a combination of Curvep parameters — combi_run_rcurvep","text":"","code":"data(zfishbeh)  # 2 simulated sample curves + # using two thresholds + # mask the response at the higest concentration # only to output the act_set  out <- combi_run_rcurvep(   zfishbeh,   n_samples = 2,   TRSH = c(5, 10),   mask = 1,   keep_sets = \"act_set\")  # create the zfishdev_act dataset # \\donttest{   data(zfishdev_all)  zfishdev_act <- combi_run_rcurvep(    zfishdev_all, n_samples = 100, keep_sets = c(\"act_set\"),TRSH = seq(5, 95, by = 5),    RNGE = 1000000, CARR = 20, seed = 300  ) # }"},{"path":"https://moggces.github.io/Rcurvep/reference/create_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create concentration-response datasets that can be applied in the run_rcurvep() — create_dataset","title":"Create concentration-response datasets that can be applied in the run_rcurvep() — create_dataset","text":"input dataset created either summarizing response data simulating response data.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/create_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create concentration-response datasets that can be applied in the run_rcurvep() — create_dataset","text":"","code":"create_dataset(d, n_samples = NULL, vdata = NULL)"},{"path":"https://moggces.github.io/Rcurvep/reference/create_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create concentration-response datasets that can be applied in the run_rcurvep() — create_dataset","text":"d Datasets concentration-response data. Examples zfishbeh zfishdev. n_samples NULL (default) simulate responses integer number indicate number responses per concentration simulate. vdata NULL (default) simulate responses vector numeric responses vehicle control wells use error. parameter works n_samples NULL; experimental feature.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/create_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create concentration-response datasets that can be applied in the run_rcurvep() — create_dataset","text":"original dataset new column, sample_id (n_samples NULL) summarized dataset columns zfishbeh.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/create_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create concentration-response datasets that can be applied in the run_rcurvep() — create_dataset","text":"Curvep requires 1--1 concentration response relationship. dataset meet requirement, following strategies applied:","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/create_dataset.html","id":"summary-when-n-samples-null-","dir":"Reference","previous_headings":"","what":"Summary (when n_samples = NULL)","title":"Create concentration-response datasets that can be applied in the run_rcurvep() — create_dataset","text":"dichotomous responses, percentage reported (n_in/N*100). continuous responses, median value responses per concentration reported.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/create_dataset.html","id":"simulation-when-n-samples-is-a-positive-integer-","dir":"Reference","previous_headings":"","what":"Simulation (when n_samples is a positive integer)","title":"Create concentration-response datasets that can be applied in the run_rcurvep() — create_dataset","text":"dichotomous responses, bootstrap approach used \"n_in\" vector create vector percent response. continuous responses, options ) direct sampling; b) responses linear fit using original data + error responses based supplied vehicle control data","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/create_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create concentration-response datasets that can be applied in the run_rcurvep() — create_dataset","text":"","code":"# datasets with continuous response data data(zfishbeh)  ## default d <- create_dataset(zfishbeh)  ## add samples d <- create_dataset(zfishbeh, n_samples = 3)  ## add samples and vdata d <- create_dataset(zfishbeh, n_samples = 3, vdata = rnorm(100))  # dataset with dichotomous response data data(zfishdev)  ## default d <- create_dataset(zfishdev)  ## add samples d <- create_dataset(zfishdev, n_samples = 3)"},{"path":"https://moggces.github.io/Rcurvep/reference/curvep.html","id":null,"dir":"Reference","previous_headings":"","what":"The Curvep function to process one set of concentration-response data — curvep","title":"The Curvep function to process one set of concentration-response data — curvep","text":"relationship concentration response 1 1. function backbone run_rcurvep() combi_run_rcurvep().","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/curvep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Curvep function to process one set of concentration-response data — curvep","text":"","code":"curvep(   Conc,   Resp,   Mask = NULL,   TRSH = 15,   RNGE = -100,   MXDV = 5,   CARR = 0,   BSFT = 3,   USHP = 4,   TrustHi = FALSE,   StrictImp = TRUE,   DUMV = -999,   TLOG = -24,   ... )"},{"path":"https://moggces.github.io/Rcurvep/reference/curvep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Curvep function to process one set of concentration-response data — curvep","text":"Conc Array concentrations, e.g., Molar units, can log-transformed, case internal log-transformation skipped. Resp Array responses corresponding concentrations, e.g., raw measurements normalized controls. Mask array 1/0 flags indicating invalidated measurements (default = NULL). TRSH Base(zero-)line threshold (default = 15). RNGE Target range responses (default = -100). MXDV Maximum allowed deviation monotonicity (default = 5). CARR Carryover detection threshold (default = 0, analysis skipped set 0). CARR defined maximum expected magnitude artifact response; higher baseline TRSH value, curves active signal baseline CARR first doses considered carry-cases. Also, curves responses CARR treated potent. BSFT baseline shift issue, min.#points detect baseline shift (default = 3, analysis skipped set 0). USHP u-shape curves, min.#points avoid flattening (default = 4, analysis skipped set 0). TrustHi equal sets corrections, trusts retaining measurements high concentrations (default = FALSE). StrictImp prevents extrapolating concentration-range boundaries; used POD, ECxx etc (default = TRUE). DUMV dummy value, default = -999. TLOG scaling factor calculating wAUC, default = -24. ... allow parameters pass","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/curvep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Curvep function to process one set of concentration-response data — curvep","text":"list corrected concentration-response measurements several calculated curve metrics. resp: corrected responses corr: flags corrections ECxx: effective concentration values various thresholds Cxx: concentrations various absolute response levels Emax: maximum effective concentration, slope mid-curve (b/w EC25 EC75) wConc: response-weighted concentration wResp: concentration-weighed response POD: point--departure (first concentration response >TRSH) AUC: area--curve (units log-concentration X response) wAUC: AUC weighted concentration range POD / TLOG (-24) wAUC_pre: AUC weighted concentration range POD nCorrected: number points corrected (basically, sum flags corr) Comments: warning notes dose-response curve Settings: input parameters run","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/curvep.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Curvep function to process one set of concentration-response data — curvep","text":"Sedykh , Zhu H, Tang H, Zhang L, Richard , Rusyn , Tropsha (2011). “Use vitro HTS-derived concentration-response data biological descriptors improves accuracy QSAR models vivo toxicity.” Environmental health perspectives, 119(3), 364-370. ISSN 0091-6765, doi:10.1289/ehp.1002476 . Sedykh (2016). “CurveP Method Rendering High-Throughput Screening Dose-Response Data Digital Fingerprints.” Methods molecular biology (Clifton, N.J.), 1473. ISSN 1064-3745, doi:10.1007/978-1-4939-6346-1_14 .","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/curvep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Curvep function to process one set of concentration-response data — curvep","text":"","code":"curvep(Conc = c(-8, -7, -6, -5, -4) , Resp = c(0, -3, -5, -15, -30)) #> $resp #> [1]   0   0   0 -15 -30 #>  #> $corr #> [1] 0 0 0 0 0 #>  #> $ECxx #>  [1] -5.98 -5.90 -5.80 -5.60 -5.50 -5.00 -4.50 -4.40 -4.20 -4.10 -4.02 -4.00 #>  #> $Cxx #>  [1]   -5.933333   -5.666667   -5.333333   -4.666667   -4.333333 -999.000000 #>  [7] -999.000000 -999.000000 -999.000000 -999.000000 -999.000000 -999.000000 #>  #> $xx #>  [1]   1   5  10  20  25  50  75  80  90  95  99 100 #>  #> $Emax #> [1] -30 #>  #> $slope #> [1] -15 #>  #> $wConc #> [1] -4.333333 #>  #> $wResp #> [1] -6.5 #>  #> $EC50 #> [1] -5 #>  #> $C50 #> [1] -999 #>  #> $POD #> [1] -5 #>  #> $AUC #> [1] -30 #>  #> $wAUC #> [1] -1.263158 #>  #> $wAUC_prev #> [1] -37.5 #>  #> $nCorrected #> [1] 0 #>  #> $Comments #> [1] \"OK\" #>  #> $Settings #> $Settings$TRSH #> [1] 15 #>  #> $Settings$RNGE #> [1] -100 #>  #> $Settings$MXDV #> [1] 5 #>  #> $Settings$CARR #> [1] 0 #>  #> $Settings$BSFT #> [1] 3 #>  #> $Settings$USHP #> [1] 4 #>  #> $Settings$TrustHi #> [1] FALSE #>  #> $Settings$StrictImp #> [1] TRUE #>  #> $Settings$DUMV #> [1] -999 #>  #> $Settings$TLOG #> [1] -24 #>  #>"},{"path":"https://moggces.github.io/Rcurvep/reference/curvep_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Default parameters of Curvep — curvep_defaults","title":"Default parameters of Curvep — curvep_defaults","text":"Default parameters Curvep","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/curvep_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default parameters of Curvep — curvep_defaults","text":"","code":"curvep_defaults()"},{"path":"https://moggces.github.io/Rcurvep/reference/curvep_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default parameters of Curvep — curvep_defaults","text":"list parameters class curvep_config. TRSH: (default = 15) base(zero-)line threshold RNGE: (default = -1000000, decreasing) target range responses MXDV: (default = 5) maximum allowed deviation monotonicity CARR: (default = 0) carryover detection threshold (analysis skipped set 0) BSFT: (default = 3) baseline shift issue, min.#points detect baseline shift (analysis skipped set 0) USHP: (default = 4) u-shape curves, min.#points avoid flattening (analysis skipped set 0) TrustHi: (default = TRUE)equal sets corrections, trusts retaining measurements high concentrations StrictImp: (default = TRUE) prevents extrapolating concentration-range boundaries; used POD, ECxx etc. DUMV: (default = -999) dummy value inactive (suggested modify) TLOG: (default = -24) denominator calculation wAUC (suggested modify) seed: (default = NA) can set bootstrapping samples","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/curvep_defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default parameters of Curvep — curvep_defaults","text":"","code":"# display all default settings curvep_defaults() #>  #> curvep configuration parameters #>          TRSH:    [15] #>          RNGE:    [-1e+06] #>          MXDV:    [5] #>          CARR:    [0] #>          BSFT:    [3] #>          USHP:    [4] #>       TrustHi:    [TRUE] #>     StrictImp:    [TRUE] #>          DUMV:    [-999] #>          TLOG:    [-24] #>          seed:    [NA] #>   # customize settings custom_settings <- curvep_defaults() custom_settings$TRSH <- 30 custom_settings #>  #> curvep configuration parameters #>          TRSH:    [30] #>          RNGE:    [-1e+06] #>          MXDV:    [5] #>          CARR:    [0] #>          BSFT:    [3] #>          USHP:    [4] #>       TrustHi:    [TRUE] #>     StrictImp:    [TRUE] #>          DUMV:    [-999] #>          TLOG:    [-24] #>          seed:    [NA] #>"},{"path":"https://moggces.github.io/Rcurvep/reference/estimate_dataset_bmr.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate benchmark response (BMR) for each dataset — estimate_dataset_bmr","title":"Estimate benchmark response (BMR) for each dataset — estimate_dataset_bmr","text":"Currently two methods implemented get \"keen-point\" variance(y) - threshold(x) curve. One use original y values draw straight line lowest x value (p1) highest x value (p2). knee-point x longest distance line. one fit data first use fitted responses analysis. Currently first method preferred.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/estimate_dataset_bmr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate benchmark response (BMR) for each dataset — estimate_dataset_bmr","text":"","code":"estimate_dataset_bmr(d, p1 = NULL, p2 = NULL, plot = TRUE)"},{"path":"https://moggces.github.io/Rcurvep/reference/estimate_dataset_bmr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate benchmark response (BMR) for each dataset — estimate_dataset_bmr","text":"d rcurvep object multiple samples TRSHs. See combi_run_rcurvep() example. p1 Default = NULL, integer value manually set first index line. p2 Default = NULL, integer value manually set last index line. plot Default = TRUE, plot diagnostic plot.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/estimate_dataset_bmr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate benchmark response (BMR) for each dataset — estimate_dataset_bmr","text":"list two components: stats outcome. stats: tibble, including pooled variance (pvar), fitted responses (y_exp_fit, y_lm_fit), distance line (dist2l) outcome: tibble, including estimated BMRs (bmr) ; Suffix stats outcome tibble: \"ori\" (original values), \"exp\"(exponential fit). prefix outcome tibble, \"cor\" (correlation fitted responses original responses), \"bmr\" (benchmark response), \"qc\" (quality control).","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/estimate_dataset_bmr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate benchmark response (BMR) for each dataset — estimate_dataset_bmr","text":"estimated BMR can used calculation POD. example, bmr = 25. Curvep, combi_run_rcurvep(zfishbeh, TRSH = 25). Hill fit, summarize_fit_output(run_fit(zfishbeh, modls = \"hill\"), thr_resp = 25, extract_only = TRUE).","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/estimate_dataset_bmr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate benchmark response (BMR) for each dataset — estimate_dataset_bmr","text":"","code":"# no extra cleaning data(zfishdev_act) bmr_out <- estimate_dataset_bmr(zfishdev_act, plot = FALSE) plot(bmr_out) #> $`1` #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 76 rows containing missing values or values outside the scale range #> (`geom_line()`).  #>   # if want to do extra cleaning... actm <- summarize_rcurvep_output(zfishdev_act, clean_only = TRUE, inactivate = \"CARRY_OVER\")  bmr_out <- estimate_dataset_bmr(actm, plot = FALSE)"},{"path":"https://moggces.github.io/Rcurvep/reference/fit_cc2_modl.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit concentration-response data using Curve Class2 approach — fit_cc2_modl","title":"Fit concentration-response data using Curve Class2 approach — fit_cc2_modl","text":"Curve Class2 uses 4-parameter Hill model fit data. algorithm assumes responses percentile. Curve Class2 classifies curves based fit quality response magnitude.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_cc2_modl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit concentration-response data using Curve Class2 approach — fit_cc2_modl","text":"","code":"fit_cc2_modl(Conc, Resp, classSD = 5, minYrange = 20, ...)"},{"path":"https://moggces.github.io/Rcurvep/reference/fit_cc2_modl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit concentration-response data using Curve Class2 approach — fit_cc2_modl","text":"Conc vector log10 concentrations. Resp vector numeric responses. classSD standard deviation (SD) derived responses vehicle control. used classification curves. Default = 5%. minYrange minimum response range (max activity - min activity) required apply curve fitting. Curve fitting attempted response range less cutoff. Default = 20%. ... additional curve class2 parameters (currently none)","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_cc2_modl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit concentration-response data using Curve Class2 approach — fit_cc2_modl","text":"list output parameters Curve Class2 model fit. data fit fittable (fit = 0), default value tp, ga, gw, bt pvalue, masks, nmasks NA. cc2 = 4, still possible fit parameters. modl: model type, .e., cc2 fit: fittable, 1 (yes) 0 () aic: NA, calculated model. parameter kept compatability. cc2: curve class2, default = 4 tp: model top, <0 means fit decreasing direction preferred ga: ac50 (log10 scale) gw: Hill coefficient bt: model bottom pvalue: F-test, fit quality r2: fitness masks: string indicate positions response masked nmasks: number masked responses","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_cc2_modl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit concentration-response data using Curve Class2 approach — fit_cc2_modl","text":"cc2 = 1.1 2-asymptote curve, pvalue < 0.05, emax > 6\\*classSD cc2 = 1.2 2-asymptote curve, pvalue < 0.05, emax <= 6\\*classSD & emax > 3\\*classSD cc2 = 1.3 2-asymptote curve, pvalue >= 0.05, emax > 6\\*classSD cc2 = 1.4 2-asymptote curve, pvalue >= 0.05, emax <= 6\\*classSD & emax > 3\\*classSD cc2 = 2.1 1-asymptote curve, pvalue < 0.05, emax > 6\\*classSD cc2 = 2.2 1-asymptote curve, pvalue < 0.05, emax <= 6\\*classSD & emax > 3\\*classSD cc2 = 2.3 1-asymptote curve, pvalue >= 0.05, emax > 6\\*classSD cc2 = 2.4 1-asymptote curve, pvalue >= 0.05, emax <= 6\\*classSD & emax > 3\\*classSD cc2 = 3 single point activity, pvalue = NA, emax > 3\\*classSD cc2 = 4 inactive, pvalue  >= 0.05, emax <= 3\\*classSD cc2 = 5 inconclusive, high bt, investigation needed","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_cc2_modl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit concentration-response data using Curve Class2 approach — fit_cc2_modl","text":"Huang R (2022). “Quantitative High-Throughput Screening Data Analysis Pipeline Activity Profiling.” Methods molecular biology (Clifton, N.J.), 2474, 133—145. ISSN 1064-3745, doi:10.1007/978-1-0716-2213-1_13 .","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/fit_cc2_modl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit concentration-response data using Curve Class2 approach — fit_cc2_modl","text":"","code":"fit_cc2_modl(c(-9, -8, -7, -6, -5, -4), c(0, 2, 30, 40, 50, 60)) #> $aic #> [1] NA #>  #> $fit #> [1] 1 #>  #> $modl #> [1] \"cc2\" #>  #> $cc2 #> [1] 1.1 #>  #> $gw #> [1] 0.6 #>  #> $tp #> [1] 57.4 #>  #> $bt #> [1] -4 #>  #> $ga #> [1] -6.9 #>  #> $masks #> [1] \"0 0 0 0 0 0\" #>  #> $nMasks #> [1] 0 #>  #> $pvalue #> [1] 0.01651874 #>  #> $r2 #> [1] 0.9699059 #>"},{"path":"https://moggces.github.io/Rcurvep/reference/fit_modls.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit one set of concentration-response data using types of models — fit_modls","title":"Fit one set of concentration-response data using types of models — fit_modls","text":"convenient function fit data using available models sort outcomes AIC values.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_modls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit one set of concentration-response data using types of models — fit_modls","text":"","code":"fit_modls(Conc, Resp, Mask = NULL, modls, ...)"},{"path":"https://moggces.github.io/Rcurvep/reference/fit_modls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit one set of concentration-response data using types of models — fit_modls","text":"Conc vector log10 concentrations. Resp vector numeric responses. Mask Default = NULL vector 1 0. 1 masking respective response. modls model types fitting. Currently available models 3-parameter Hill model (hill), constant model (cnst), Curve Class2 4-parameter Hill model (cc2). Multiple values allowed hill cnst combination. ... named input configurations replacing default configurations. input configuration needs add model type prefix. example, hill_pdir = -1 set Hill fit decreasing direction. Another common parameter cc2 model cc2_classSD. default value cc2_classSD 5%, might small noiser endpoints.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_modls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit one set of concentration-response data using types of models — fit_modls","text":"list components named models. models sorted AIC values (multiple models used). Thus, first component best fit.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_modls.html","id":"hill","dir":"Reference","previous_headings":"","what":"hill","title":"Fit one set of concentration-response data using types of models — fit_modls","text":"Fit output Hill equation modl: model type, .e., hill fit: fittable, 1 (yes) 0 () aic: AIC value tp: model top, <0 means fit decreasing direction preferred ga: ac50 (log10 scale) gw: Hill coefficient er: scale term Student's t distribution","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_modls.html","id":"cnst","dir":"Reference","previous_headings":"","what":"cnst","title":"Fit one set of concentration-response data using types of models — fit_modls","text":"Fit output constant model modl: model type, .e., cnst fit: fittable?, 1 0 aic: AIC value er: scale term","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_modls.html","id":"cc-","dir":"Reference","previous_headings":"","what":"cc2","title":"Fit one set of concentration-response data using types of models — fit_modls","text":"Fit output Curve Class 2 model modl: model type, .e., cc2 fit: fittable, 1 (yes) 0 () aic: NA, calculated model. parameter kept compatability. cc2: curve class2, default = 4 tp: model top, <0 means fit decreasing direction preferred ga: ac50 (log10 scale) gw: Hill coefficient bt: model bottom pvalue: F-test, fit quality r2: fitness masks: string indicate positions response masked nmasks: number masked responses","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/fit_modls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit one set of concentration-response data using types of models — fit_modls","text":"backbone fit method using hill (3-parameter Hill model) cnst (constant model) based implementation tcpl package. lower bound ga lower log10(1/100). cc2 model 4-parameter Hill model Curve Class2.","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/fit_modls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit one set of concentration-response data using types of models — fit_modls","text":"","code":"concd <- c(-9, -8, -7, -6, -5, -4) respd <- c(0, 2, 30, 40, 50, 20) maskd <- c(0, 0, 0, 0, 0, 1)  # run hill only fit_modls(concd, respd, modls = \"hill\") #> $hill #> $hill$modl #> [1] \"hill\" #>  #> $hill$fit #> [1] 1 #>  #> $hill$aic #> [1] 50.48779 #>  #> $hill$tp #> [1] 41.3016 #>  #> $hill$ga #> [1] -7.24924 #>  #> $hill$gw #> [1] 1.687904 #>  #> $hill$er #> [1] 1.683594 #>  #> $hill$bt #> [1] 0 #>  #>   # run hill only + increasing direction only fit_modls(concd, respd, modls = \"hill\", hill_pdir = 1) #> $hill #> $hill$modl #> [1] \"hill\" #>  #> $hill$fit #> [1] 1 #>  #> $hill$aic #> [1] 50.48779 #>  #> $hill$tp #> [1] 41.3016 #>  #> $hill$ga #> [1] -7.24924 #>  #> $hill$gw #> [1] 1.687904 #>  #> $hill$er #> [1] 1.683594 #>  #> $hill$bt #> [1] 0 #>  #>   # run cc2 only + change of classSD fit_modls(concd, respd, modls = \"cc2\", cc2_classSD = 10) #> $cc2 #> $cc2$aic #> [1] NA #>  #> $cc2$fit #> [1] 1 #>  #> $cc2$modl #> [1] \"cc2\" #>  #> $cc2$cc2 #> [1] 1.2 #>  #> $cc2$gw #> [1] 1.1341 #>  #> $cc2$tp #> [1] 46.5 #>  #> $cc2$bt #> [1] -1.5 #>  #> $cc2$ga #> [1] -7.2 #>  #> $cc2$masks #> [1] \"0 0 0 0 0 1\" #>  #> $cc2$nMasks #> [1] 1 #>  #> $cc2$pvalue #> [1] 0.03811983 #>  #> $cc2$r2 #> [1] 0.9803869 #>  #>   # run hill + cnst fit_modls(concd, respd, modls = c(\"hill\", \"cnst\")) #> $hill #> $hill$modl #> [1] \"hill\" #>  #> $hill$fit #> [1] 1 #>  #> $hill$aic #> [1] 50.48779 #>  #> $hill$tp #> [1] 41.3016 #>  #> $hill$ga #> [1] -7.24924 #>  #> $hill$gw #> [1] 1.687904 #>  #> $hill$er #> [1] 1.683594 #>  #> $hill$bt #> [1] 0 #>  #>  #> $cnst #> $cnst$modl #> [1] \"cnst\" #>  #> $cnst$fit #> [1] 1 #>  #> $cnst$er #> [1] 3.278765 #>  #> $cnst$aic #> [1] 60.59508 #>  #>   # run with mask at the highest concentration fit_modls(concd, respd, maskd, modls = \"hill\") #> $hill #> $hill$modl #> [1] \"hill\" #>  #> $hill$fit #> [1] 1 #>  #> $hill$aic #> [1] 32.97162 #>  #> $hill$tp #> [1] 49.39584 #>  #> $hill$ga #> [1] -7.123603 #>  #> $hill$gw #> [1] 1.501527 #>  #> $hill$er #> [1] 0.2031836 #>  #> $hill$bt #> [1] 0 #>  #>"},{"path":"https://moggces.github.io/Rcurvep/reference/get_hill_fit_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the default configurations for the Hill fit — get_hill_fit_config","title":"Get the default configurations for the Hill fit — get_hill_fit_config","text":"function gives default settings using one set concentration-response data.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/get_hill_fit_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the default configurations for the Hill fit — get_hill_fit_config","text":"","code":"get_hill_fit_config(Conc, Resp, optimf = \"tcplObjHill\")"},{"path":"https://moggces.github.io/Rcurvep/reference/get_hill_fit_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the default configurations for the Hill fit — get_hill_fit_config","text":"Conc vector log10 concentrations. Resp vector numeric responses. optimf default optimized function tcpl::tcplObjHill(). can changed ObjHillnorm().","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/get_hill_fit_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the default configurations for the Hill fit — get_hill_fit_config","text":"list input configurations. theta: initial values parameters Hill equation: tp, ga, gw, er f: object function ui: bound matrix ci: bound constraints","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/merge_rcurvep_objs.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge results from multiple rcurvep objects — merge_rcurvep_objs","title":"Merge results from multiple rcurvep objects — merge_rcurvep_objs","text":"Sometimes user may want try multiple curvep setting pick one can capture shape (wAUC != 0). highest absolute wAUC chemical-endpoint(-sample_id) pair picked.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/merge_rcurvep_objs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge results from multiple rcurvep objects — merge_rcurvep_objs","text":"","code":"merge_rcurvep_objs(...)"},{"path":"https://moggces.github.io/Rcurvep/reference/merge_rcurvep_objs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge results from multiple rcurvep objects — merge_rcurvep_objs","text":"... rcurvep objects","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/merge_rcurvep_objs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge results from multiple rcurvep objects — merge_rcurvep_objs","text":"updated rcurvep object config = NULL","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/merge_rcurvep_objs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge results from multiple rcurvep objects — merge_rcurvep_objs","text":"","code":"data(zfishbeh)  # combine default + mask out1 <- combi_run_rcurvep(zfishbeh, TRSH = 10) out2 <- combi_run_rcurvep(zfishbeh, TRSH = 10, mask = 1) m1 <- merge_rcurvep_objs(out1, out2)  # use same set of samples to combine out1 <- combi_run_rcurvep(zfishbeh, TRSH = 10, n_samples = 2, seed = 300) out2 <- combi_run_rcurvep(zfishbeh, TRSH = 10, mask = 1, n_samples = 2, seed = 300) m1 <- merge_rcurvep_objs(out1, out2)"},{"path":"https://moggces.github.io/Rcurvep/reference/plot.rcurvep_bmr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot BMR diagnostic curves — plot.rcurvep_bmr","title":"Plot BMR diagnostic curves — plot.rcurvep_bmr","text":"Plot BMR diagnostic curves","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/plot.rcurvep_bmr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot BMR diagnostic curves — plot.rcurvep_bmr","text":"","code":"# S3 method for class 'rcurvep_bmr' plot(x, ...)"},{"path":"https://moggces.github.io/Rcurvep/reference/plot.rcurvep_bmr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot BMR diagnostic curves — plot.rcurvep_bmr","text":"x rcurvep_bmr object estimate_dataset_bmr(). ... Allowed values: n_in_page, number endpoints page.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/plot.rcurvep_bmr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot BMR diagnostic curves — plot.rcurvep_bmr","text":"ggplot object.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/plot.rcurvep_bmr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot BMR diagnostic curves — plot.rcurvep_bmr","text":"","code":"data(zfishdev_act) bmr_out <- estimate_dataset_bmr(zfishdev_act, plot = FALSE) plot(bmr_out) #> $`1` #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 76 rows containing missing values or values outside the scale range #> (`geom_line()`).  #>"},{"path":"https://moggces.github.io/Rcurvep/reference/Rcurvep-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Rcurvep: Concentration-Response Data Analysis using Curvep — Rcurvep-package","title":"Rcurvep: Concentration-Response Data Analysis using Curvep — Rcurvep-package","text":"R interface processing concentration-response datasets using Curvep, response noise filtering algorithm. algorithm described publications (Sedykh et al. (2011) doi:10.1289/ehp.1002476  Sedykh (2016) doi:10.1007/978-1-4939-6346-1_14 ). parametric fitting approaches (e.g., Hill equation) also adopted ease comparison. 3-parameter Hill equation 'tcpl' package (Filer D et al., doi:10.1093/bioinformatics/btw680 ) 4-parameter Hill equation Curve Class2 approach (Wang Y et al., doi:10.2174/1875397301004010057 ) available. Also, methods calculating confidence interval around activity metrics also provided. methods based bootstrap approach simulate datasets (Hsieh J-H et al. doi:10.1093/toxsci/kfy258 ). simulated datasets can used derive baseline noise threshold assay endpoint. threshold critical toxicological studies derive point--departure (POD).","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/Rcurvep-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rcurvep: Concentration-Response Data Analysis using Curvep — Rcurvep-package","text":"Maintainer: Jui-Hua Hsieh juihua.hsieh@gmail.com (ORCID) Authors: Alexander Sedykh Tongan Zhao contributors: Fred Parham [contributor] Yuhong Wang [contributor] Ruili Huang [contributor]","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/run_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Run parametric fits using types of models on concentration-response datasets — run_fit","title":"Run parametric fits using types of models on concentration-response datasets — run_fit","text":"Confidence intervals activity metrics can obtained bootstrap approach. bootstrap samples generated adding residuals (difference original responses Hill fit) fitted response (Hill equation, 3-parameter).","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/run_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run parametric fits using types of models on concentration-response datasets — run_fit","text":"","code":"run_fit(d, modls, keep_sets = c(\"fit_set\", \"resp_set\"), n_samples = NULL, ...)"},{"path":"https://moggces.github.io/Rcurvep/reference/run_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run parametric fits using types of models on concentration-response datasets — run_fit","text":"d Datasets concentration-response data. example zfishbeh. mask column optional. modls model types fitting. Currently available models 3-parameter Hill model (hill), constant model (cnst), Curve Class2 4-parameter Hill model (cc2). Multiple values allowed hill cnst combination. keep_sets Output datasets. Multiple values allowed. Default values fit_set resp_set. fit_set must. fit_set: tibble output model fits resp_set: tibble fitted response data winning model. winning model hill + fit cc2 + hit=4(inactive), response NA. winning model cnst, median responses reported concentration. n_samples NULL (default) bootstrap samples generated number samples generated bootstrapping. n_samples NULL, modls currently needs hill. ... named input configurations replacing default configurations. input configuration needs add model type prefix. example, hill_pdir = -1 set Hill fit decreasing direction. Add cc2_classSD = 10 set classification SD 10%. Often 5% 10% used.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/run_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run parametric fits using types of models on concentration-response datasets — run_fit","text":"list named components: result result_nested. result component also list output sets depending parameter, keep_sets. result_nested component tibble input data nested column, input, output data nested column, output.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/run_fit.html","id":"data-structure","dir":"Reference","previous_headings":"","what":"Data structure","title":"Run parametric fits using types of models on concentration-response datasets — run_fit","text":"output |- result (list) |   |- fit_set |   |- resp_set | |- result_nested (tibble) prefix column names fit_set used models. win_modl winning model.","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/run_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run parametric fits using types of models on concentration-response datasets — run_fit","text":"","code":"# It is suggested to use na.omit on the dataset to see if any data will be removed # \\donttest{ # use hill + cnst model fitd <- run_fit(zfishbeh, modls = c(\"hill\", \"cnst\"))  # use only hill model and fit only to the decreasing direction, keep only the fit_set output fitd <- run_fit(zfishbeh, modls = \"hill\", keep_sets = \"fit_set\", hill_pdir = -1)  # use cc2 model + higher classification SD fitd <- run_fit(zfishbeh, modls = \"cc2\", cc2_classSD = 10)  # fit to the bootstrap samples using hill fitd <- run_fit(zfishbeh, n_samples = 2, modls = \"hill\") # }"},{"path":"https://moggces.github.io/Rcurvep/reference/run_rcurvep.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Curvep on datasets of concentration-response data — run_rcurvep","title":"Run Curvep on datasets of concentration-response data — run_rcurvep","text":"concentration-response relationship per endpoint chemical 1--1. , use create_dataset() pre-processing use combi_run_rcurvep(), pre-processing flexible parameter controls.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/run_rcurvep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Curvep on datasets of concentration-response data — run_rcurvep","text":"","code":"run_rcurvep(   d,   mask = 0,   config = curvep_defaults(),   keep_sets = c(\"act_set\", \"resp_set\", \"fp_set\"),   ... )"},{"path":"https://moggces.github.io/Rcurvep/reference/run_rcurvep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Curvep on datasets of concentration-response data — run_rcurvep","text":"d Datasets columns: endpoint, chemical, conc, resp, mask (optional) Example datasets zfishbeh. required baseline responses resp column 0. mask Default = 0, mask (values mask column 0). Use vector integers mask responses: 1 mask response highest concentration; 2 mask response second highest concentration, . mask column exists, setting ignored. config Default configurations set curvep_defaults(). keep_sets types output reported. Allowed values: act_set, resp_set, fp_set. Multiple values allowed. act_set must. act_set: activity data resp_set: response data fp_set: fingerprint data ... Curvep settings. See curvep_defaults() allowed parameters. can used overwrite default values.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/run_rcurvep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Curvep on datasets of concentration-response data — run_rcurvep","text":"rcurvep object. two components: result, config result component also list output sets depending parameter, keep_sets. config component curvep_config object. Often used columns act_set: AUC (area curve), wAUC (weighted AUC), POD (point--departure), EC50 (Half maximal effective concentration), nCorrected (number corrected points).","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/run_rcurvep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Curvep on datasets of concentration-response data — run_rcurvep","text":"","code":"data(zfishbeh) d <- create_dataset(zfishbeh)  # default out <- run_rcurvep(d)  # change TRSH out <- run_rcurvep(d, TRSH = 30)  # mask response at highest and second highest concentration out <- run_rcurvep(d, mask = c(1, 2))"},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"function first extracts activity data based fit supplied input parameters. addition, summary activity data (e.g., confidence interval, hit confidence) can produced.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"","code":"summarize_fit_output(   d,   thr_resp = 20,   perc_resp = 10,   ci_level = 0.95,   extract_only = FALSE )"},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"d output run_fit(). thr_resp response cutoff calculate potency. Default = 20 (POD20) perc_resp percentage cutoff calculate potency. Default = 10 (EC10). ci_level confidence level activity metrics. Default = 0.95. extract_only Whether act_summary data produced. Default = FALSE.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"list named components: result result_nested (act_summary). result result_nested copy output run_fit(). act_set added result component. (extract_only = FALSE), act_summary added.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"tibble, act_set generated. (extract_only = FALSE), tibble, act_summary generated confidence intervals activity metrics. quantile approach used calculate confidence interval. Currently bootstrap calculations hill (3-parameter) can generate confidence interval potency activity metrics, value NA, highest tested concentration used summary. activity metrics, value NA, 0 used summary.","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"cnst","dir":"Reference","previous_headings":"","what":"cnst","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"cnst winning model median responses larger thr_resp, considered hit. median responses reported Emax lowest tested concentration reported EC50, POD, ECxx.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"hill","dir":"Reference","previous_headings":"","what":"hill","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"hit (=1) considered POD < max tested concentration.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"cc-","dir":"Reference","previous_headings":"","what":"cc2","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"hit value cc2 value","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"output-structure","dir":"Reference","previous_headings":"","what":"Output structure","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"output |- result (list) |   |- fit_set (tibble, output respective fit model included) |   |- resp_set (tibble) |   |- act_set (tibble, EC50, ECxx, Emax, POD, slope, hit) | |- result_nested (tibble) |- act_summary (tibble, confidence interval)","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"activity-metrics","dir":"Reference","previous_headings":"","what":"activity metrics","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"hit hit call, see definition EC50 half maximal effect concentration ECxx effect concentration XX percent, depending perc_resp POD point--departure, depending thr_resp Emax max effect - min effect fit slope slope factor fit","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_fit_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the results from the parametric fitting using types of models — summarize_fit_output","text":"","code":"# generate some fit outputs  # \\donttest{ ## fit only fitd1 <- run_fit(zfishbeh, modls = \"cc2\")  ## fit + bootstrap samples fitd2 <- run_fit(zfishbeh, n_samples = 3, modls = \"hill\")  ## fit using hill + cnst fitd3 <- run_fit(zfishbeh, modls = c(\"hill\", \"cnst\"))   # only to extract the activity data sumd1 <- summarize_fit_output(fitd1, extract_only = TRUE) sumd3 <- summarize_fit_output(fitd3, extract_only = TRUE)  # calculate EC20 instead of default EC10 sumd1 <- summarize_fit_output(fitd1, extract_only = TRUE, perc_resp  = 20)  # calculate POD using a higher noise level (e.g., 40) ## this number depends on the response unit sumd1 <- summarize_fit_output(fitd1, extract_only = TRUE, thr_resp  = 40)  # calculate confidence intervals based on the bootstrap samples sumd2 <- summarize_fit_output(fitd2)  # }"},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_rcurvep_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and summarize the output of rcurvep object — summarize_rcurvep_output","title":"Clean and summarize the output of rcurvep object — summarize_rcurvep_output","text":"Clean summarize output rcurvep object","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_rcurvep_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and summarize the output of rcurvep object — summarize_rcurvep_output","text":"","code":"summarize_rcurvep_output(   d,   inactivate = NULL,   ci_level = 0.95,   clean_only = FALSE )"},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_rcurvep_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and summarize the output of rcurvep object — summarize_rcurvep_output","text":"d rcurvep object combi_run_rcurvep() run_rcurvep(). inactivate character string, default = NULL, make curve string Comments column inactive. vector index rows act_set needs inactive ci_level Default = 0.95 (95 percent confidence interval). clean_only Default = FALSE, 1st, 2nd task performed (see Details).","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_rcurvep_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and summarize the output of rcurvep object — summarize_rcurvep_output","text":"list named components: result config (act_summary). result config copy input d (modifications inactivate NULL). (clean_only = FALSE), act_summary added. Suffix meaning column names act_summary: med (median), cil (lower end confidence interval), ciu (higher end confidence interval) Often used columns act_summary: n_curves (number curves used summary), hit_confidence (fraction active n_curves)","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_rcurvep_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and summarize the output of rcurvep object — summarize_rcurvep_output","text":"function can perform following tasks: add column, hit, act_set unhit (make result inactive) Comments column contains certain string summarize results curve considered \"hit\" responses monotonic processing Curvep. However, often, curve \"INVERSE\" (yet monotonic) considered active curve. using information Comments column, can \"unhit\" cases. (clean_only = FALSE, default), tibble, act_summary generated confidence intervals activity metrics. quantile approach used calculate confidence interval. potency activity metrics, value NA, highest tested concentration used summary. activity metrics, value NA, 0 used summary.","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/summarize_rcurvep_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and summarize the output of rcurvep object — summarize_rcurvep_output","text":"","code":"data(zfishbeh)  # original datasets out <- combi_run_rcurvep(zfishbeh, n_samples = NULL, TRSH = c(5, 10)) out_res <- summarize_rcurvep_output(out)  # \\donttest{ # unhit when comment has \"INVERSE\" out <- summarize_rcurvep_output(out, inactivate = \"INVERSE\")  # unhit for certain rows in act_set out <- summarize_rcurvep_output(out, inactivate = c(2,3))  # simulated datasets out <- combi_run_rcurvep(zfishbeh, n_samples = 3, TRSH = c(5, 10)) out_res <- summarize_rcurvep_output(out) # }"},{"path":"https://moggces.github.io/Rcurvep/reference/zfishbeh.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsets of concentration response datasets from zebrafish neurotoxicity assays — zfishbeh","title":"Subsets of concentration response datasets from zebrafish neurotoxicity assays — zfishbeh","text":"datasets contain 11 toxicity endpoints 2 chemicals. responses normalized baseline 0.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/zfishbeh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsets of concentration response datasets from zebrafish neurotoxicity assays — zfishbeh","text":"","code":"zfishbeh"},{"path":"https://moggces.github.io/Rcurvep/reference/zfishbeh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subsets of concentration response datasets from zebrafish neurotoxicity assays — zfishbeh","text":"tibble 2123 rows 4 columns: endpoint endpoint name chemical chemical name + CASRN conc concentrations log10(M) format resp responses normalized using vehicle control plate","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/zfishbeh.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Subsets of concentration response datasets from zebrafish neurotoxicity assays — zfishbeh","text":"Biobide study S-BBD-0017/15","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev","title":"Subsets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev","text":"datasets contain 4 toxicity endpoints 3 chemicals.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev","text":"","code":"zfishdev"},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subsets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev","text":"tibble 96 rows 5 columns: endpoint endpoint name + time point measured chemical chemical name + CASRN conc concentrations log10(M) format n_in number incidence N number embryos","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Subsets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev","text":"Biobide study S-BBD-00016/15","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev_act.html","id":null,"dir":"Reference","previous_headings":"","what":"Activity output based on simulated datasets using zfishdev_all dataset — zfishdev_act","title":"Activity output based on simulated datasets using zfishdev_all dataset — zfishdev_act","text":"data rcurvep object combi_run_rcurvep(). See combi_run_rcurvep() code reproduce dataset.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev_act.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity output based on simulated datasets using zfishdev_all dataset — zfishdev_act","text":"","code":"zfishdev_act"},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev_act.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Activity output based on simulated datasets using zfishdev_all dataset — zfishdev_act","text":"list two named components: result config. result component list one component: act_set.","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Full sets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev_all","title":"Full sets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev_all","text":"datasets contain 4 toxicity endpoints 32 chemicals.","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full sets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev_all","text":"","code":"zfishdev_all"},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev_all.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Full sets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev_all","text":"tibble 512 rows 5 columns:","code":""},{"path":"https://moggces.github.io/Rcurvep/reference/zfishdev_all.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Full sets of concentration response datasets from zebrafish developmental toxicity assays — zfishdev_all","text":"Biobide study S-BBD-00016/15","code":""},{"path":[]},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-010","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.1.0","title":"Rcurvep 0.1.0","text":"initial release","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-020","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.2.0","title":"Rcurvep 0.2.0","text":"new: add diagnostic plot change: separate id parameters endpoint direction parameters identify_basenoise_threshold()","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-021","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.2.1","title":"Rcurvep 0.2.1","text":"change: TLOG(curvep.r) -24","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-03","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.3","title":"Rcurvep 0.3","text":"new: simplify_output added run_curvep_job() reduce amount output change: levels curvep() separated ECxx, Cxx, xx change: combine conc_hl act function extract_curvep_data() change: input column became list list structure","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-031","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.3.1","title":"Rcurvep 0.3.1","text":"change: expose p1 p2 identify_basenoise_threshold()","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-04","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.4","title":"Rcurvep 0.4","text":"new: add modifier parameter extract_curvep_data() new: add reparam_curvep_job() recalculate based run_curvep_job() complex output","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-041","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.4.1","title":"Rcurvep 0.4.1","text":"new: add abline line used calculate distance diagnostic plot new: add generate_diagnostic_plot() cal_exponential_inflection() new: add comment (thresDistComment) shows identified baseline threshold usable change: thresCurva approach removed","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-05","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.5","title":"Rcurvep 0.5","text":"new: add method calculate baseline noise threshold based exponential fitting (thresDist_exp column) new: statistical outputs identify_basenoise_threshold() reported ( y_exp_fit, y_lm_fit, dist2l_exp, cor_exp_fit, cor_lm_fit) change: identify_basenoise_threshold() output becomes list instead tibble; first element contains statistical data second element contains baseline noise threshold information change: cal_exponential_inflection() renamed cal_knee_point() change: p1, p2 => p1_raw, p2_raw; dist2l => dist2l_raw","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-051","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.5.1","title":"Rcurvep 0.5.1","text":"new: summarize_curvep_output() get confidence interval activities bypassing extract_curvep_data() change: use SSasymp fit exponential decay curve","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-052","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.5.2","title":"Rcurvep 0.5.2","text":"change: fix comment_threshold()","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-060","dir":"Changelog","previous_headings":"","what":"Rcurvep 0.6.0","title":"Rcurvep 0.6.0","text":"new: print.rcurvep_thres_stats() -> print() change: run_curvep_job() -> run_curvep_batch() change: extract_curvep_data() -> withdraw.rcurvep_out_nested() -> withdraw() change: reparam_curvep_job() -> reparam.rcurvep_out_nested() -> reparam() change: extract_curvep_data(summary = TRUE) -> summary.rcurvep_out() -> summary() change: identify_basenoise_threshold() -> get_baseline_threshold() change: generate_diagnostic_plot() -> plot.rcurvep_thres_stats() -> plot()","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-100","dir":"Changelog","previous_headings":"","what":"Rcurvep 1.0.0","title":"Rcurvep 1.0.0","text":"new: rewrite project","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-101","dir":"Changelog","previous_headings":"","what":"Rcurvep 1.0.1","title":"Rcurvep 1.0.1","text":"change: fix get_base_cols()","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-110","dir":"Changelog","previous_headings":"","what":"Rcurvep 1.1.0","title":"Rcurvep 1.1.0","text":"change fix critical bug curvep() related masking","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-120","dir":"Changelog","previous_headings":"","what":"Rcurvep 1.2.0","title":"Rcurvep 1.2.0","text":"CRAN release: 2021-01-07 new: allow merge rcurvep objects, merge_rcurvep_objs() new: allow inactivate curves row index add flag comments new: add seed parameter curvep_defaults() new: allow input seed combi_run_rcurvep() change: fix ECxx missing summarizing bootstrap results fit","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-121","dir":"Changelog","previous_headings":"","what":"Rcurvep 1.2.1","title":"Rcurvep 1.2.1","text":"CRAN release: 2022-08-25 change: fix bug get_base_cols one set available (act_set, resp_set, fp_set) merge_rcurvep_objs","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-130","dir":"Changelog","previous_headings":"","what":"Rcurvep 1.3.0","title":"Rcurvep 1.3.0","text":"new: add java curve class2 model","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-131","dir":"Changelog","previous_headings":"","what":"Rcurvep 1.3.1","title":"Rcurvep 1.3.1","text":"CRAN release: 2024-01-09 new: add vignette using parallel computing Rcurvep package change: use furrr::future_pmap combi_run_curvep() use furrr::future_map run_fit()","code":""},{"path":"https://moggces.github.io/Rcurvep/news/index.html","id":"rcurvep-132","dir":"Changelog","previous_headings":"","what":"Rcurvep 1.3.2","title":"Rcurvep 1.3.2","text":"change: fix bug cal_fit_dataset run_fit hill bootstrap specific direction change: add descriptions CARR parameter change: update vignette parallel computing","code":""}]
