install.packages("boot")
roxygen2::roxygenise()
install.packages('roxygen2')
?as_tibble
?tibble::as_tibble
devtools::use_package("dplyr", "tibble")
devtools::use_package(c("dplyr", "tibble"))
devtools::use_package("dplyr")
devtools::use_package("tibble")
devtools::use_package("boot")
?dplyr::select
?dplyr::unnest
?tidyr::unnest
devtools::use_package("tidyr")
?tidyr::map
?dplyr::map
devtools::use_package("purrr")
devtools::use_data
?devtools::use_data
?readRDS
install.packages('stringr')
zfishdev <- readRDS("./data-raw/zfishdev.rds")
simu_dd2 %>%
dplyr::filter(stringr::str_detect(well__substance, 'Caffeine|Saccharin|Dieldrin')) %>%
dplyr::rename(endpoint = id, chemical = well__substance)
library(dplyr)
zfishdev <- readRDS("./data-raw/zfishdev.rds")
zfishdev <- simu_dd2 %>%
filter(stringr::str_detect(well__substance, 'Caffeine|Saccharin|Dieldrin')) %>%
rename(endpoint = id, chemical = well__substance)
devtools::use_data
?devtools::use_data
devtools::use_data(zfishdev)
zfishdev
zfishdev <- readRDS("./data-raw/zfishdev.rds")
zfishdev <- zfishdev %>%
filter(stringr::str_detect(well__substance, 'Caffeine|Saccharin|Dieldrin')) %>%
rename(endpoint = id, chemical = well__substance)
devtools::use_data(zfishdev)
devtools::use_data(zfishdev, overwrite =  TRUE)
zfishdev
zfishdev %>% pull(endpoint) %>% unique()
?rlang
install.packages('rlang')
zfishdev <- readRDS("./data-raw/zfishdev.rds")
zfishdev <- zfishdev %>%
filter(stringr::str_detect(well__substance, 'Caffeine|Saccharin|Dieldrin')) %>%
transmute(directionality = as.integer(directionality), n_in = as.integer(n_in), N = as.integer(N))
rename(endpoint = id, chemical = well__substance)
zfishdev <- zfishdev %>%
filter(stringr::str_detect(well__substance, 'Caffeine|Saccharin|Dieldrin')) %>%
transmute(directionality = as.integer(directionality), n_in = as.integer(n_in), N = as.integer(N)) %>%
rename(endpoint = id, chemical = well__substance)
zfishdev <- readRDS("./data-raw/zfishdev.rds")
zfishdev <- zfishdev %>%
filter(stringr::str_detect(well__substance, 'Caffeine|Saccharin|Dieldrin')) %>%
transmute(directionality = as.integer(directionality), n_in = as.integer(n_in), N = as.integer(N)) %>%
rename(endpoint = id, chemical = well__substance)
zfishdev <- readRDS("./data-raw/zfishdev.rds")
zfishdev <- zfishdev %>%
filter(stringr::str_detect(well__substance, 'Caffeine|Saccharin|Dieldrin')) %>%
mutate(directionality = as.integer(directionality), n_in = as.integer(n_in), N = as.integer(N)) %>%
rename(endpoint = id, chemical = well__substance)
devtools::use_data(zfishdev, overwrite =  TRUE)
directionality
zfishdev
zfishbeh <- readRDS("./data-raw/zfishbeh.rds")
zfishbeh <-  zfishbeh %>%
filter(stringr::str_detect(well__substance, 'Caffeine|Saccharin|Dieldrin')) %>%
mutate(directionality = as.integer(directionality), n_in = as.integer(n_in), N = as.integer(N)) %>%
rename(endpoint = id, chemical = well__substance)
devtools::use_data(zfishbeh, overwrite =  TRUE)
zfishbeh
zfishbeh <- readRDS("./data-raw/zfishbeh.rds")
zfishbeh <-  zfishbeh %>%
filter(stringr::str_detect(well__substance, 'Caffeine|Saccharin|Dieldrin')) %>%
mutate(directionality = as.integer(directionality)) %>%
rename(endpoint = id, chemical = well__substance)
devtools::use_data(zfishbeh, overwrite =  TRUE)
zfishdev
zfishbeh
?devtools::document()
?devtools::document
?select
zfishdev
library(Rcurvep)
?hello
?Rcurvep
devtools::use_testthat()
?testthat::`testthat-package`
devtools::load_all()
?abort
?bad_args
?bad_args
?dplyr::bad_args
?left_join
?unite
?map
?nest
?set_names
devtools::load_all()
library(Rcurvep)
library(Rcurvep)
run_curvep_job()
devtools::document()
devtools::document()
devtools::use_vignette("Rcurvep-intro")
data("zfishdev")
zfishdev
system.time(simu_dd2s <- zfishdev %>%
tidyr::unite(duid, id, well__substance, directionality, sep = "#") %>%
split(.$duid) %>%
purrr::map(., function(x) purrr::map(x, list) %>% tibble::as_tibble() %>% dplyr::select(-duid)) %>%
dplyr::bind_rows(.id = "duid") %>%
tidyr::separate(duid, c("endp", "chem", "dire"), sep = "#", convert = TRUE, remove = FALSE)# %>%
#left_join(dmso_varl, by = c("endp" = "id"))
)
?%>%
?`%>%``
?`%>%`
run_curvep_job
run_curvep_job
run_curvep_job()
library(Rcurvep)
run_curvep_job()
?RCurvep
?Rcurvep
devtools::document()
devtools::document()
library(Rcurvep)
devtools::document()
library(Rcurvep)
?`Rcurvep-package`
run_curvep_job()
run_curvep()
?run_curvep_job
library(Rcurvep)
?run_curvep_job
run_curvep_job
library(Rcurvep)
data("zfishdev")
system.time(simu_dd2s <- zfishdev %>%
tidyr::unite(duid, id, well__substance, directionality, sep = "#") %>%
split(.$duid) %>%
purrr::map(., function(x) purrr::map(x, list) %>% tibble::as_tibble() %>% dplyr::select(-duid)) %>%
dplyr::bind_rows(.id = "duid") %>%
tidyr::separate(duid, c("endp", "chem", "dire"), sep = "#", convert = TRUE, remove = FALSE)# %>%
#left_join(dmso_varl, by = c("endp" = "id"))
)
?expect_output
library(Rcurvep)
run_curvep_job()
run_curvep_job
library(Rcurvep)
run_curvep_job
data("zfishdev")
x <- zfishdev %>%
split(.$endpoint)
library(dplyr)
sessionInfo()
update.packages('rlang')
install.packages('rlang')
zfishdev
source('Z:/hsiehj2/Projects/R_code/NIEHS/Rcurvep/data-raw/zfish_data_split.R')
library(Rcurvep)
?bindrcpp
data("zfishdev")
zfishdev
library(Rcurvep)
data("zfishdev")
zfishdev
rlang::is_integer()
rlang::is_integer(1)
is.integer(1)
is.integer(1.0)
?is.integer
rlang::as_integer()
?rlang::as_integer()
?rlang::as_integer
rlang::as_integer(2)
rlang::is_integer(rlang::as_integer(2))
zfishbeh
library(Rcurvep)
library(Rcurvep)
devtools::load_all()
library(Rcurvep)
devtools::load_all()
devtools::load_all()
run_curvep_job()
run_curvep_job
devtools::test()
devtools::load_all()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
zfishbeh
irirs
devtools::test()
devtools::test()
devtools::test()
devtools::test()
rnorm(n, mean = 0, sd = 1)
devtools::test()
devtools::test()
library(Rcurvep)
?`Rcurvep-package`
library(Rcurvep)
?`Rcurvep-package`
iris
?iris
?median
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(Rcurvep)
devtools::test()
devtools::test()
is_list
rlang::is_list
?rlang::is_list
is_named()
rlang::is_named()
?rlang::is_named
rlang::is_nameed(list(x = 1))
rlang::is_named(list(x = 1))
rlang::is_named(list(1))
?rlang::abort
rlang::is_numeric(rlang::as_numeric(c(10, 20)))
rlang::is_bare_numeric()
?rlang::is_bare_numeric
?rlang::is_integer
rlang::is_double(rlang::is_double(c(1, 10)))
?is.numeric
is.numeric(1, 10)
(rlang::is_vector(c(1, 10)))
(rlang::is_vector(c(1, "1")))
list(1 = 15, -1 = 10)
list("1" = 15, "-1" = 10)
temp1 <- list("1" = 15, "-1" = 10)
names(temp1)
names(temp1) %in% c(1, -1)
temp1 <- list("1" = 15)
names(temp1) %in% c(1, -1)
temp1 <- list("1" = 15, "0" = 10)
names(temp1) %in% c(1, -1)
names(temp1) %in% c(1, -1) == length(threshold)
names(temp1) %in% c(1, -1) == length(temp1)
sum(names(temp1) %in% c(1, -1)) == length(temp1)
temp1 <- list("1" = 15, "-1" = 10)
sum(names(temp1) %in% c(1, -1)) == length(temp1)
is.numeric(c(1, 10))
is.numeric(c(1, "2"))
as.numeric(c(1, "2"))
curvep
args(curvep)
?args
?match.call
match(curvep)
match.call(curvep)
match.call(curvep) %>% as.list()
args(curvep)
args(dplyr)
args(dplyr::arrange)
devtools::test()
devtools::test()
devtools::test()
sum(0 %in% c(1, 0, -1))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(Rcurvep)
devtools::test()
devtools::test()
?Vignettes
?Vignettes
?browseVignettes(package = "Rcurvep")
curvep
curvep(Conc = c(-8, -7, -6, -5, -4) , Resp = c(0, -3, -5, -15, -30))
extract_curvep_data
data(zfishdev)
x <- zfishdev %>% split(.$endpoint)
outd <- run_curvep_job(x[[1]], directionality = 1, n_sample = 1, threshold = 15, other_paras = list(CARR = 20, TrustHi = TRUE))
outd
outd
temp1 <- run_curvep_job(x[[1]], directionality = 1, n_sample = 1, threshold = 15, other_paras = list(CARR = 20, TrustHi = TRUE))
temp1
str(temp1)
temp1
library(Rcurvep)
data(zfishdev)
x <- zfishdev %>% split(.$endpoint)
library(dplyr)
x <- zfishdev %>% split(.$endpoint)
outd <- run_curvep_job(x[[1]], directionality = 1, n_sample = 1, threshold = 15, other_paras = list(CARR = 20, TrustHi = TRUE))
outd
extract_curvep_data(outd, "act")
extract_curvep_data(outd, "concs_hl")
extract_curvep_data(outd, "concs_in")
extract_curvep_data(outd, "resps_out")
extract_curvep_data(outd, "paras_in")
extract_curvep_data(outd, "paras")
outd <- run_curvep_job(x[[1]], directionality = 1, n_sample = 1, threshold = 15, other_paras = list())
extract_curvep_data(outd, "paras_in")
vignette("Rcurvep")
vignette("Rcurvep-intro")
vignette("dplyr")
browseVignettes("dplyr")
vignette("Rcurvep-intro")
vignette()
vignette(package = "Rcurvep")
?expect
devtools::test()
devtools::build_vignettes()
# a pre-defined threshold
threshold_up <- 15
outd <- run_curvep_job(zfishbeh, 1, n_sample = NULL, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE))
# a pre-defined threshold for increasing response
threshold_up <- 15
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = NULL, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE))
# a pred-defined threshold for decreasing response
threshold_down <- 30
outd <- run_curvep_job(zfishbeh, directionality = -1, n_sample = NULL, threshold = threshold_down, other_paras = list(CARR = 20, TrustHi = TRUE))
# or combined
outd <- run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = list("1" = threshold_up, "-1" = threshold_down), other_paras = list(CARR = 20, TrustHi = TRUE))
n_sample_test <- 2
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = n_sample_test, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE))
error <- rnorm(100, 0, 10)
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = n_sample_test, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE), vehicle_data = error)
# a pre-defined threshold for increasing response
threshold_up <- 15
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = NULL, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE))
# a pred-defined threshold for decreasing response
threshold_down <- 30
outd <- run_curvep_job(zfishbeh, directionality = -1, n_sample = NULL, threshold = threshold_down, other_paras = list(CARR = 20, TrustHi = TRUE))
# or combined
outd <- run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = list("1" = threshold_up, "-1" = threshold_down), other_paras = list(CARR = 20, TrustHi = TRUE))
# a pre-defined threshold for increasing response
threshold_up <- 15
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = NULL, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE))
outd
# a pred-defined threshold for decreasing response
threshold_down <- 30
outd <- run_curvep_job(zfishbeh, directionality = -1, n_sample = NULL, threshold = threshold_down, other_paras = list(CARR = 20, TrustHi = TRUE))
# or combined
outd <- run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = list("1" = threshold_up, "-1" = threshold_down), other_paras = list(CARR = 20, TrustHi = TRUE))
# a pre-defined threshold for increasing response
threshold_up <- 15
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = NULL, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE))
# a pred-defined threshold for decreasing response
threshold_down <- 30
outd <- run_curvep_job(zfishbeh, directionality = -1, n_sample = NULL, threshold = threshold_down, other_paras = list(CARR = 20, TrustHi = TRUE))
outd
# or combined
outd <- run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = list("1" = threshold_up, "-1" = threshold_down), other_paras = list(CARR = 20, TrustHi = TRUE))
# a pre-defined threshold for increasing response
threshold_up <- 15
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = NULL, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE))
# a pred-defined threshold for decreasing response
threshold_down <- 30
outd <- run_curvep_job(zfishbeh, directionality = -1, n_sample = NULL, threshold = threshold_down, other_paras = list(CARR = 20, TrustHi = TRUE))
# or combined
outd <- run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = list("1" = threshold_up, "-1" = threshold_down), other_paras = list(CARR = 20, TrustHi = TRUE))
outd
devtools::test()
names(list("1" = threshold_up, "-1" = threshold_down))
names(list("1" = threshold_up, "-1" = threshold_down)) %in% c(-1, 1)
length(list("1" = threshold_up, "-1" = threshold_down))
devtools::test()
devtools::test()
devtools::test()
list("1" = threshold_up, "-1" = threshold_down)
devtools::test()
# a pre-defined threshold for increasing response
threshold_up <- 15
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = NULL, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE))
# a pred-defined threshold for decreasing response
threshold_down <- 30
outd <- run_curvep_job(zfishbeh, directionality = -1, n_sample = NULL, threshold = threshold_down, other_paras = list(CARR = 20, TrustHi = TRUE))
# or combined
outd <- run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = list("1" = threshold_up, "-1" = threshold_down), other_paras = list(CARR = 20, TrustHi = TRUE))
run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = list("1" = threshold_up, "-1" = threshold_down), other_paras = list(CARR = 20, TrustHi = TRUE))
threshold_l <- list("1" = threshold_up, "-1" = threshold_down)
threshold_l
run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = threshold_l, other_paras = list(CARR = 20, TrustHi = TRUE))
.check_threshold <- function(threshold, directionality)
{
directionality <- .check_directionality(directionality)
if (rlang::is_list(threshold))
{
if ( sum(names(threshold) %in% c(1, -1)) != length(threshold) )
{
rlang::abort("threshold is a list but the names are not c(-1, 1)")
}
} else if (!is.numeric(as.numeric(threshold)))
{
rlang::abort("threshold is not a numeric vector")
}
return(threshold)
}
.check_directionality <- function(directionality)
{
if (sum(directionality %in% c(1, 0, -1)) != 1)
{
rlang::abort("only 1, 0, or -1 is allowed")
} else
{
return(directionality)
}
}
threshold_l <- list("1" = threshold_up, "-1" = threshold_down)
#print(threshold_l)
.check_threshold(threshold = threshold_l, 0)
run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = threshold_l, other_paras = list(CARR = 20, TrustHi = TRUE))
check_threshold <- function(threshold)
{
#directionality <- .check_directionality(directionality)
if (rlang::is_list(threshold))
{
if ( sum(names(threshold) %in% c(1, -1)) != length(threshold) )
{
rlang::abort("threshold is a list but the names are not c(-1, 1)")
}
} else if (!is.numeric(as.numeric(threshold)))
{
rlang::abort("threshold is not a numeric vector")
}
return(threshold)
}
# a pre-defined threshold for increasing response
#threshold_up <- 15
#outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = NULL, threshold = threshold_up, #other_paras = list(CARR = 20, TrustHi = TRUE))
# a pred-defined threshold for decreasing response
#threshold_down <- 30
#outd <- run_curvep_job(zfishbeh, directionality = -1, n_sample = NULL, threshold = #threshold_down, other_paras = list(CARR = 20, TrustHi = TRUE))
# or combined
threshold_l <- list("1" = 15, "-1" = 30)
#print(threshold_l)
check_threshold(threshold = threshold_l)
outd <- run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = threshold_l, other_paras = list(CARR = 20, TrustHi = TRUE))
library(Rcurvep)
packrat::snapshot()
packrat::status()
packrat::snapshot()
here
packrat::snapshot()
data("zfishdev_act")
acts <- zfishdev_act %>%
separate(dduid, c("endpoint", "chemical", "directionality"), sep = "#") %>%
mutate(POD = ifelse(is.na(POD), conc_highest, POD))
```{r loadp, message = FALSE, warning =  FALSE}
# load required packages
library(Rcurvep)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
data("zfishdev_act")
acts <- zfishdev_act %>%
separate(dduid, c("endpoint", "chemical", "directionality"), sep = "#") %>%
mutate(POD = ifelse(is.na(POD), conc_highest, POD))
acts
acts %>% count(endpoint, thres)
acts %>% distinct(endpoint, thres)
?count
acts %>% group_by(endpoint) %>% count
glimpse(act)
glimpse(acts)
?glimpse
outthres <- select_basenoise_threshold(acts, id = c("endpoint", "directionality"), chemical = "chemical", threshold = "thres", potency = "POD")
outthres
temp <- 'tend'
rlang::sym(temp)
?rlang::sym
rlang::sym(temp) %>% as.character()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
data("zfishdev_act")
acts <- zfishdev_act %>%
separate(dduid, c("endpoint", "chemical", "directionality"), sep = "#") %>%
mutate(POD = ifelse(is.na(POD), conc_highest, POD))
acts %>%
count()
outthres <- identify_basenoise_threshold(acts, id = c("endpoint", "directionality"), chemical = "chemical", threshold = "thres", potency = "POD")
data("zfishdev_act")
acts <- zfishdev_act %>%
separate(dduid, c("endpoint", "chemical", "directionality"), sep = "#") %>%
mutate(POD = ifelse(is.na(POD), conc_highest, POD))
acts %>%
count()
outthres <- identify_basenoise_threshold(acts, id = c("endpoint", "directionality"), chemical = "chemical", threshold = "thres", potency = "POD")
data("zfishdev_act")
acts <- zfishdev_act %>%
separate(dduid, c("endpoint", "chemical", "directionality"), sep = "#") %>%
mutate(POD = ifelse(is.na(POD), conc_highest, POD))
outthres <- identify_basenoise_threshold(acts, id = c("endpoint", "directionality"), chemical = "chemical", threshold = "thres", potency = "POD")
library(Rcurvep)
data("zfishdev_act")
acts <- zfishdev_act %>%
separate(dduid, c("endpoint", "chemical", "directionality"), sep = "#") %>%
mutate(POD = ifelse(is.na(POD), conc_highest, POD))
outthres <- identify_basenoise_threshold(acts, id = c("endpoint", "directionality"), chemical = "chemical", threshold = "thres", potency = "POD")
outthres
