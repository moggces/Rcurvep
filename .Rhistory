tidyr::unnest("temp")
d %>%
dplyr::mutate(
temp = purrr::map(.data$rcurvep_obj, ~ .x[['result']][[keep_set]])
) %>%
dplyr::select(-.data$rcurvep_obj) %>%
tidyr::unnest("temp")
d %>%
dplyr::mutate(
temp = purrr::map(.data$rcurvep_obj, ~ .x[['result']][[keep_set]])
) %>%
dplyr::select(-.data$rcurvep_obj) %>%
tidyr::unnest("temp") %>% arrange(chemical, endpoint)
?dplyr::arrange
devtools::test(filter = "combirun")
thresholds <- c(5, 10)
n_samples <- 2
seed <- 300
outp1 <- combi_run_rcurvep(zfishbeh, n_samples = n_samples, TRSH = thresholds, seed = seed)
outp1$config$seed
?dplyr::near
devtools::test(filter = "combirun")
devtools::test(filter = "combirun")
devtools::test(filter = "combirun")
devtools::test()
run_fit(zfishbeh)
run_fit(zfishbeh, n_samples = 2)
devtools::load_all(".")
run_fit(zfishbeh, n_samples = 2)
d %>%
dplyr::arrange(!!!nest_colsq) %>%
#tidyr::nest(-tidyselect::one_of(nest_cols), .key = "input"))
tidyr::nest(input = -tidyselect::one_of(nest_cols))
devtools::load_all(".")
run_fit(zfishbeh, n_samples = 2)
result %>%
dplyr::mutate(
direction = purrr::map_dbl(
.data$output, get_hillfit_direction, pdir = pdir)
) %>%
dplyr::select(-.data$input, -.data$output)
result %>%
dplyr::mutate(
direction = purrr::map_dbl(
.data$output, get_hillfit_direction, pdir = pdir)
) %>%
dplyr::select(-.data$input, -.data$output) %>%
tidyr::unnest("simud") %>%
dplyr::select(-.data$mask)
result %>%
dplyr::mutate(
direction = purrr::map_dbl(
.data$output, get_hillfit_direction, pdir = pdir)
) %>%
dplyr::select(-.data$input, -.data$output) %>%
tidyr::unnest()
tidyr::unnest()
?tidyr::unnest()
devtools::load_all(".")
?run_curvep
d <- create_dataset(zfishbeh)
run_rcurvep(d)
run_rcurvep(d, mask = c(1, 2))
d %>%
dplyr::arrange(.data$endpoint, .data$chemical, dplyr::desc(.data$conc)) %>%
tidyr::nest(-.data$endpoint, -.data$chemical, .key = "data")
d %>% tidyr::nest(data = -c(.data$endpoint, .data$chemical))
d %>%
dplyr::arrange(.data$endpoint, .data$chemical, dplyr::desc(.data$conc)) %>%
tidyr::nest(data = -c(.data$endpoint, .data$chemical) %>%
dplyr::mutate(
mask = purrr::map(data, function(x, mask) replace(rep(0, nrow(x)), mask, 1), mask = mask)
) %>%
tidyr::unnest(cols = "data")
d %>%
dplyr::arrange(.data$endpoint, .data$chemical, dplyr::desc(.data$conc)) %>%
tidyr::nest(data = -c(.data$endpoint, .data$chemical)) %>%
dplyr::mutate(
mask = purrr::map(data, function(x, mask) replace(rep(0, nrow(x)), mask, 1), mask = mask)
) %>%
tidyr::unnest(cols = "data")
d %>%
dplyr::arrange(.data$endpoint, .data$chemical, dplyr::desc(.data$conc)) %>%
tidyr::nest(data = -c(.data$endpoint, .data$chemical)) %>%
dplyr::mutate(
mask = purrr::map(data, function(x, mask) replace(rep(0, nrow(x)), mask, 1), mask = mask)
)
d %>%
dplyr::arrange(.data$endpoint, .data$chemical, dplyr::desc(.data$conc)) %>%
tidyr::nest(data = -c(.data$endpoint, .data$chemical)) %>%
dplyr::mutate(
mask = purrr::map(data, function(x, mask) replace(rep(0, nrow(x)), mask, 1), mask = mask)
) %>%
tidyr::unnest()
devtools::load_all(".")
devtools::load_all(".")
run_rcurvep(d, mask = c(1, 2))
devtools::load_all(".")
run_rcurvep(d, mask = c(1, 2))
devtools::load_all(".")
data("zfishbeh")
data("zfishdev")
dats1 <- zfishbeh
dats2 <- zfishdev
create_dataset(dats1, n_samples = 3, vdata = rnorm(100))
temp1 <- d %>%
tidyr::nest(lm_input = -c(!!!baseq)) %>%
dplyr::mutate(conc = purrr::map(.data$lm_input, ~ unique(.x$conc))) %>%
dplyr::mutate(lm_model = purrr::map(.data$lm_input, ~ lm(resp ~ conc, data = .x))) %>%
dplyr::mutate(
resp = purrr::pmap(., function(...) {
l <- list(...)
predict(l$lm_model, data.frame(conc = l$conc))
})
) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$lm_model, -.data$lm_input)
temp1
devtools::load_all(".")
create_dataset(dats1, n_samples = 3, vdata = rnorm(100))
create_dataset(dats1, n_samples = 3, vdata = rnorm(100))
result <- d %>%
dplyr::mutate(sample_id = list(1:n_samples)) %>%
dplyr::select(-data)
d %>%
dplyr::mutate(sample_id = list(1:n_samples)) %>%
dplyr::select(-data) %>%
tidyr::unnest()
d %>%
dplyr::mutate(sample_id = list(1:n_samples)) %>%
dplyr::select(-data)
devtools::load_all(".")
create_dataset(dats1, n_samples = 3, vdata = rnorm(100))
devtools::load_all(".")
sumd <- summarize_rcurvep_output(zfishdev_act, clean_only = TRUE)
estimate_dataset_bmr(sumd, plot = FALSE)
kneed %>%
dplyr::mutate(temp = purrr::map(.data$knee_out, ~ .x[[type]])) %>%
dplyr::select(-.data$knee_out, -.data$input) %>%
tidyr::unnest()
kneed %>%
dplyr::mutate(temp = purrr::map(.data$knee_out, ~ .x[[type]])) %>%
dplyr::select(-.data$knee_out, -.data$input)
estimate_dataset_bmr(sumd, plot = FALSE)
devtools::load_all(".")
estimate_dataset_bmr(sumd, plot = FALSE)
estimate_dataset_bmr(sumd, plot = TRUE)
statsd %>%
tidyr::nest(input = -c(!!!nest_cols)) %>%
dplyr::mutate(
temp = purrr::pmap(., ~ get_p1_p2_linecoeff(..4, "TRSH", "pvar", ..2, ..3))
) %>%
dplyr::select(-.data$input)
devtools::load_all(".")
estimate_dataset_bmr(sumd, plot = TRUE)
sqrt(0.02)
10^0.14
sumd <- summarize_rcurvep_output(zfishdev_act, clean_only = TRUE)
nested %>%
dplyr::select(base_cols, add_col)
result <- nested %>%
dplyr::select(base_cols, add_col) %>%
tidyr::unnest(cols = add_col)
devtools::load_all(".")
sumd <- summarize_rcurvep_output(zfishdev_act, clean_only = TRUE)
devtools::load_all(".")
sumd <- summarize_rcurvep_output(zfishdev_act, clean_only = TRUE)
outp1 <- combi_run_rcurvep(zfishbeh, n_samples = 3, TRSH = c(5, 10))
d
tbl_names
purrr::map(
keep_sets, function(x, tbl_names, obj)
obj[c("endpoint", "chemical", tbl_names[[x]])] %>% tidyr::unnest(),
tbl_names = tbl_names,
obj = d
) %>% rlang::set_names(keep_sets)
tbl_names
purrr::map(
keep_sets, function(x, tbl_names, obj)
obj[c("endpoint", "chemical", tbl_names[[x]])] %>% tidyr::unnest(cols = tbl_names[[x]]),
tbl_names = tbl_names,
obj = d
) %>% rlang::set_names(keep_sets)
devtools::load_all(".")
outp1 <- combi_run_rcurvep(zfishbeh, n_samples = 3, TRSH = c(5, 10))
outp1
outp <- run_fit(zfishbeh, keep_sets = "fit_set", hill_pdir = -1)
purrr::map(
keep_sets, function(x, tbl_names, obj)
tidyr::unnest(
obj %>% dplyr::select(tidyselect::one_of(c("endpoint", "chemical", "sample_id", tbl_names[[x]]))),
),
tbl_names = tbl_names,
obj = fitd
) %>% rlang::set_names(keep_sets)
purrr::map(
keep_sets, function(x, tbl_names, obj)
tidyr::unnest(
obj %>% dplyr::select(tidyselect::one_of(c("endpoint", "chemical", "sample_id", tbl_names[[x]]))), cols = tbl_names[[x]]
),
tbl_names = tbl_names,
obj = fitd
) %>% rlang::set_names(keep_sets)
devtools::test()
fitd1 <- run_fit(zfishbeh)
sumd1 <- summarize_fit_output(fitd1, extract_only = TRUE)
sumd1
sumd1$result$fit_set
sumd1$result
sumd1$result$act_set
fitd2 <- run_fit(zfishbeh, n_samples = 3)
sumd2 <- summarize_fit_output(fitd2)
sumd2$act_summary
sumd1$result$act_set
devtools::load_all(".")
sumd2 <- summarize_fit_output(fitd2)
sumd2$act_summary
devtools::test()
devtools::build_vignettes()
library(Rcurvep)
vignette(Rcurvep)
browseVignettes("Rcurvep")
devtools::install()
zfishbeh
devtools::load_all(".")
devtools::test()
devtools::check()
curvep_defaults()
devtools::install(build_vignettes = TRUE)
up <- readRDS(here("data-raw", "up.rds"))
up <- readRDS(here::here("data-raw", "up.rds"))
carryids <- c(422L, 674L, 2735L, 3785L, 6893L, 7388L, 7718L, 20205L, 21406L, 28876L, 423L, 675L, 2736L, 3786L, 6894L, 7389L, 7698L, 7719L, 17206L, 17239L, 421L, 673L, 3784L, 5614L, 6892L, 7387L, 7696L, 7717L, 8116L, 18976L, 20963L, 22121L, 22139L, 22154L, 23984L, 24224L, 26585L, 26816L, 34410L, 28571L, 28640L, 12697L, 18572L, 18596L, 18848L, 8566L, 9298L, 21513L, 22665L, 24225L, 26586L, 26805L, 34412L, 28767L, 12665L, 13688L, 14654L, 3017L, 3905L, 4337L)
devtools::load_all(".")
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
temp1 <- lsets$act_set
View(temp1)
act_set
act_set$hit
type
result$corrected_resp
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
lsets$act_set
lsets$act_set$hit
lsets$act_set$hit %>% unique
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
act_set
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
devtools::load_all(".")
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
base_cols
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
base_cols
base_cols <- setdiff(base_cols, "wAUC")
base_cols
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
devtools::load_all(".")
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
lsets
up
up$result$resp_set <- up$result$resp_set %>% select(-wAUC)
up$result$resp_set <- up$result$resp_set %>% dplyr::select(-wAUC)
summarize_rcurvep_output(up, inactivate = carryids, clean_only = TRUE)
devtools::test(filter = "mergeobj")
# decreasing/sampling
out4 <- combi_run_rcurvep(
dat, n_samples = 2, TRSH = 10, seed = 300)
# increasing/sampling
out5 <- combi_run_rcurvep(
dat, n_samples = 2, TRSH = 10, RNGE = 100000, seed = 300)
m2 <- merge_rcurvep_obj(out4,out5)
out <- summarize_rcurvep_output(m2, inactivate = c(2, 3), clean_only = TRUE)
out$result$resp_set
out$result$act_set
temp1 <- out$result$act_set
View(temp1)
summarize_rcurvep_output(m2, inactivate = c(2, 3), clean_only = FALSE)
temp1 <- summarize_rcurvep_output(m2, inactivate = c(2, 3), clean_only = FALSE)
temp1$act_summary
temp2 <- temp1$act_summary
View(temp2)
temp3 <- summarize_rcurvep_output(out4, inactivate = c(2, 3), clean_only = FALSE)
temp3$act_summary
devtools::test(filter = "mergeobj")
devtools::test(filter = "mergeobj")
devtools::test()
devtools::install(build_vignettes = TRUE)
?tidyselect::one_of
devtools::load_all(".")
devtools::test(filter = "summary")
outp1 <- combi_run_rcurvep(zfishbeh, n_samples = 3, TRSH = c(5, 10))
outp1$result$act_set <- outp1$result$act_set %>% dplyr::select(-n_conc)
outp1s <- summarize_rcurvep_output(outp1)
outp1s <- summarize_rcurvep_output(outp1)
act_setg
devtools::load_all(".")
outp1s <- summarize_rcurvep_output(outp1)
outp1s$act_summary
outp1 <- combi_run_rcurvep(zfishbeh, n_samples = 3, TRSH = c(5, 10))
outp1s <- summarize_rcurvep_output(outp1)
outp1s$act_summary
library(Rcurvep)
devtools:build_source()
devtools::build_source()
devtools::build()
old_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "D:\\qpdf-9.1.0\\bin", sep = ";"))
devtools::check_built(path = "D:\\Download\\Rcurvep_1.2.tar.gz")
install.packages('furrr')
availableCores()
library(furrr)
availableCores()
plan()
devtools::load_all(".")
thresholds <- c(5, 10)
n_samples <- 2
outp <- combi_run_rcurvep(zfishbeh, n_samples = n_samples, TRSH = thresholds)
outp
thresholds <- c(5, 10)
n_samples <- 2
outp <- combi_run_rcurvep(zfishbeh, n_samples = 10, TRSH = thresholds)
system.time(outp <- combi_run_rcurvep(zfishbeh, n_samples = 10, TRSH = thresholds))
plan(multisession, workers = 3)
system.time(outp <- combi_run_rcurvep(zfishbeh, n_samples = 10, TRSH = thresholds))
tic()
system.time(outp <- combi_run_rcurvep(zfishbeh, n_samples = 10, TRSH = thresholds)); toc()
install.packages('tictoc')
library(tictoc)
tic()
system.time(outp <- combi_run_rcurvep(zfishbeh, n_samples = 10, TRSH = thresholds)); toc()
plan()
plan(sequential)
tic()
system.time(outp <- combi_run_rcurvep(zfishbeh, n_samples = 10, TRSH = thresholds)); toc()
plan(multisession, workers = 3)
tic()
system.time(outp <- combi_run_rcurvep(zfishbeh, n_samples = 10, TRSH = thresholds)); toc()
tic()
system.time(outp <- combi_run_rcurvep(zfishbeh, n_samples = 10, TRSH = thresholds)); toc()
devtools::load_all(".")
devtools::test()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
library(here)
library(Rcurvep)
library(furrr)
plan(multisession, workers = 3) # use parallel processing ; default is plan(sequential)
library(furrr)
#> Warning: package 'furrr' was built under R version 3.4.4
#> Loading required package: future
#> Warning: package 'future' was built under R version 3.4.4
library(purrr)
plan(multiprocess)
boot_df <- function(x) x[sample(nrow(x), replace = T), ]
rsquared <- function(mod) summary(mod)$r.squared
boot_lm <- function(i) {
rsquared(lm(mpg ~ wt + disp, data = boot_df(mtcars)))
}
system.time(map(1:500, boot_lm))
#>    user  system elapsed
#>   0.470   0.006   0.477
system.time(future_map(1:500, boot_lm))
plan(multisession, workers = 3)
system.time(map(1:500, boot_lm))
#>    user  system elapsed
#>   0.470   0.006   0.477
system.time(future_map(1:500, boot_lm))
availableCores()
library(furrr)
#> Warning: package 'furrr' was built under R version 3.4.4
#> Loading required package: future
#> Warning: package 'future' was built under R version 3.4.4
library(purrr)
plan(multisession, workers = 3)
boot_df <- function(x) x[sample(nrow(x), replace = T), ]
rsquared <- function(mod) summary(mod)$r.squared
boot_lm <- function(i) {
rsquared(lm(mpg ~ wt + disp, data = boot_df(mtcars)))
}
system.time(map(1:500, boot_lm))
system.time(future_map(1:500, boot_lm))
set.seed(300)
system.time(future_map(1:500, boot_lm))
?future_map
system.time(future_map(1:500, boot_lm, future.seed = TRUE))
system.time(future_map(1:500, boot_lm))
system.time(future_map(1:500, boot_lm))
system.time(future_map(1:500, boot_lm))
system.time(future_map(1:500, boot_lm))
system.time(future_map(1:500, boot_lm))
system.time(map(1:500, boot_lm))
system.time(map(1:500, boot_lm))
system.time(map(1:500, boot_lm))
system.time(map(1:500, boot_lm))
system.time(future_map(1:500, boot_lm))
system.time(future_map(1:500, boot_lm))
system.time(future_map(1:500, boot_lm))
library(furrr)
#> Warning: package 'furrr' was built under R version 3.4.4
#> Loading required package: future
#> Warning: package 'future' was built under R version 3.4.4
library(purrr)
boot_df <- function(x) x[sample(nrow(x), replace = T), ]
rsquared <- function(mod) summary(mod)$r.squared
boot_lm <- function(i) {
rsquared(lm(mpg ~ wt + disp, data = boot_df(mtcars)))
}
plan(multisession, workers = 3)
system.time(map(1:500, boot_lm))
#>    user  system elapsed
#>   0.470   0.006   0.477
system.time(future_map(1:500, boot_lm))
remove.packages("furrr", lib="~/R/win-library/3.5")
library(Rcurvep)
combi_run_rcurvep()
combi_run_rcurvep
install.packages('tcpl')
devtools::load_all(".")
data(zfishbeh)
system.time(out <- combi_run_rcurvep(zfishbeh, n_samples = NULL, TRSH = c(5, 10)))
system.time(out_res <- summarize_rcurvep_output(out))
system.time(out <- summarize_rcurvep_output(out, inactivate = "INVERSE"))
log10(0.5)
10^0.5
devtools::install_github("moggces/Rcurvep", build_vignettes = TRUE)
devtools::install_github("moggces/Rcurvep", build_vignettes = TRUE)
devtools::install_github("moggces/Rcurvep", build_vignettes = TRUE)
library(Rcurvep)
?Rcurvep
## fit only
fitd1 <- run_fit(zfishbeh)
## fit + bootstrap samples
fitd2 <- run_fit(zfishbeh, n_samples = 3)
fitd1
class(ffitd1)
class(fitd1)
summarize_fit_output(fitd1, extract_only = FALSE)
temp1 <- summarize_fit_output(fitd1, extract_only = FALSE)
temp1$act_summary
out1 <- combi_run_rcurvep(zfishbeh, TRSH = 10)
out2 <- combi_run_rcurvep(zfishbeh, TRSH = 10, mask = 1)
m1 <- merge_rcurvep_obj(out1, out2)
m1
?run_fit
run_fit(zfishdev)
run_fit(create_dataset(zfishdev))
?combi_run_rcurvep
?run_fit
?summarize_fit_output
?summarize_rcurvep_output
multNonASCIIcheck <- function(path) {
# version 1.0 (4 Apr 2014)
# path: complete folder path to the "man" folder of your package skeleton
odir <- getwd()
setwd(path)
files <- list.files()
for (f in files) {
cat("\n", f, "\n", sep = "")
if(length(tools::showNonASCIIfile(f)) == 0) cat("OK\n")
}
setwd(odir)
}
multNonASCIIcheck("Z:\hsiehj2\Projects\R_code\NIEHS\Rcurvep\man")
multNonASCIIcheck("Z:\\hsiehj2\\Projects\\R_code\\NIEHS\\Rcurvep\\man")
library(tidyverse)
library(here)
map(list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
map(list.files(here("doc"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
map(list.files(here("docs"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
map(list.files(here("docs"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile) %>% set_names(here("docs"))
map(list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
map(list.files(here("man"), pattern = "md", include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
?list.files
list.files(here("man"), pattern = ".md")
map(list.files(here(), pattern = "md", include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
map(list.files(here("man"), pattern = "md", include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
map(list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
here("man")
map(list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile) %>% set_names(here("man"))
here("man")
list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE)
devtools::load_all("Z:/hsiehj2/Projects/R_code/NIEHS/Rcurvep")
list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE)
list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
library(here)
map(list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile))
map(list.files(here("man"), include.dirs=FALSE, full.names=TRUE, no..=TRUE, recursive = TRUE), tools::showNonASCIIfile)
devtools::test()
devtools::check_win_devel()
devtools::check()
devtools::check_win_devel()
devtools::release()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site
pkgdown::build_site()
options(pkgdown.internet = FALSE)
pkgdown::build_site()
pkgdown::build_site(new_process = FALSE)
pkgdown::build_reference()
library(pkgdown)
build_site
build_site()
install.packages('pkgdown')
pkgdown::build_site()
?pkgdown::build_articles
build_site(override = list(destination = tempdir()))
pkgdown::build_site(override = list(destination = tempdir()))
