system.time(dats_out <- dats_si %>% mutate(output = map(input, run_curvep)))
dats_out
dats_out %>% pull(repeat_id)
dats_out$output
dats_out$output[[1]]
dats_out$output[[1]]$POD
source('Z:/hsiehj2/Projects/R_code/NIEHS/Rcurvep/R/curvep_excutions.R')
source('Z:/hsiehj2/Projects/R_code/NIEHS/Rcurvep/R/curvep_excutions.R')
dats_out
dats_out %>% mutate(repeat_id = as.numeric(repeat_id))
dats_out <- dats_out %>% mutate(activity = purrr::map(output, tabulate_curvep_output)) %>%
dplyr::mutate(repeat_id = as.numeric(repeat_id))
dats_out
dats_out$activity
system.time(dats_out <- dats_si %>% mutate(output = map(input, run_curvep)))
dats_out %>%
mutate(activity = purrr::map_df(output, tabulate_curvep_output))
source('Z:/hsiehj2/Projects/R_code/NIEHS/Rcurvep/R/curvep_excutions.R')
dats_out %>%
mutate(activity = purrr::map(output, tabulate_curvep_output_temp))
temp1 <- dats_out %>%
mutate(activity = purrr::map(output, tabulate_curvep_output_temp))
?flatten_df
temp1[1,]$activity %>% flatten_df()
dats_out %>%
mutate(activity = flatten_df(purrr::map(output, tabulate_curvep_output_temp)))
dats_out[1,]$output
n_sample <- 1000
n_sample <- 2
dats_out <- dats_out %>%
mutate(activity = purrr::map(output, tabulate_curvep_output)) %>%
dplyr::mutate(repeat_id = as.numeric(repeat_id))
dats_out
dats2
threshold = list("1" = c(15,20), "-1" = c(30))
threshold
threshold
threshold %>% map(., function(x) print(x))
x
threshold %>% map(., function(x) names(x))
threshold %>% map(., function(x) {names(x); x})
threshold %>% map(., function(x) {prin(names(x)); x})
threshold %>% map(., function(x) {print(names(x)); x})
threshold %>% map(., function(x) {x})
threshold %>% map(., function(x) {print(names(x))})
names(threshold)
dats2 %>%
split(.$directionality_u) %>%
map2_df(., names(.), function(a, b) {
thr_range <- threshold[[b]] %>% rlang::set_names(.)
thr_range %>%
purrr::map_df(function(x) {
dats2 %>%
tidyr::nest(-dduid, -repeat_id) %>%
dplyr::mutate(input = purrr::map(data, create_curvep_input,
threshold = x, paras = other_paras))
}, .id = "threshold")
})
dats2 %>%
split(.$directionality_u)
dats2 %>%
split(.$directionality_u) %>%
map2_df(., names(.), function(a, b) {
thr_range <- threshold[[b]] %>% rlang::set_names(.)
thr_range %>%
purrr::map_df(function(x) {
dats2 %>%
tidyr::nest(-dduid, -repeat_id) %>%
dplyr::mutate(input = purrr::map(data, create_curvep_input,
threshold = x, paras = other_paras))
}, .id = "threshold")
})
dats_si <- dats2 %>%
split(.$directionality_u) %>%
map2_df(., names(.), function(a, b) {
thr_range <- threshold[[b]] %>% rlang::set_names(.)
thr_range %>%
purrr::map_df(function(x) {
dats2 %>%
tidyr::nest(-dduid, -repeat_id) %>%
dplyr::mutate(input = purrr::map(data, create_curvep_input,
threshold = x, paras = other_paras))
}, .id = "threshold")
}) %>%
dplyr::mutate(threshold = as.numeric(threshold)) %>%
dplyr::select(-data)
system.time(dats_out <- dats_si %>% mutate(output = map(input, run_curvep)))
dats_out <- dats_out %>%
mutate(activity = purrr::map(output, tabulate_curvep_output)) %>%
dplyr::mutate(repeat_id = as.numeric(repeat_id))
source('Z:/hsiehj2/Projects/R_code/NIEHS/Rcurvep/R/curvep_excutions.R')
devtools::test()
?test
dats_si <- dats2 %>%
split(.$directionality_u) %>%
purrr::map2_df(., names(.), function(a, b) {
thr_range <- threshold[[b]] %>% rlang::set_names(.)
thr_range %>%
purrr::map_df(function(x) {
dats2 %>%
tidyr::nest(-dduid, -repeat_id) %>%
dplyr::mutate(input = purrr::map(data, create_curvep_input,
threshold = x, paras = other_paras))
}, .id = "threshold")
}) %>%
dplyr::mutate(threshold = as.numeric(threshold)) %>%
dplyr::select(-data)
dats_si
source('Z:/hsiehj2/Projects/R_code/NIEHS/Rcurvep/R/curvep_excutions.R')
dats_si <- dats2 %>%
split(.$repeat_id) %>%
purrr::map(function(z) {
z %>% split(.$directionality_u) %>%
purrr::map2_df(., names(.), function(a, b) {
thr_range <- threshold[[b]] %>% rlang::set_names(.)
thr_range %>%
purrr::map_df(function(y) {
result <- a %>%
split(.$dduid) %>%
purrr::map_df(function(x) create_curvep_input(
concs = x$concs, resps = x$resps, directionality = unique(x$directionality_u),
thres = y, mask = x$mask, other_paras = other_paras), .id = "dduid") %>%
tidyr::nest(-dduid, .key = "input")
return(result)
}, .id = "threshold") %>% dplyr::mutate(threshold = as.numeric(threshold))
})
})
dats_si
dats_si <- dats2 %>%
split(.$directionality_u) %>%
purrr::map2_df(., names(.), function(a, b) {
thr_range <- threshold[[b]] %>% rlang::set_names(.)
thr_range %>%
purrr::map_df(function(x) {
dats2 %>%
tidyr::nest(-dduid, -repeat_id) %>%
dplyr::mutate(
input = purrr::map(data, create_curvep_input_temp, threshold = x, paras = other_paras)
)
}, .id = "threshold")
}) %>%
dplyr::mutate(threshold = as.numeric(threshold)) %>%
dplyr::select(-data)
dats_si[1,]$input
dats_out <- dats_si %>%
dplyr::mutate(output = purrr::map(input, run_curvep))
dats_out <- dats_out %>%
dplyr::mutate(activity = purrr::map(output, tabulate_curvep_output)) %>%
dplyr::mutate(repeat_id = as.numeric(repeat_id))
#make sure repeat_id is numeric
if (is.null(n_sample)) dats_out <- dats_out %>% dplyr::mutate(repeat_id = as.numeric(NA))
#split the id to the original input
dats_out <- dats_out %>% tidyr::separate(dduid, c("endpoint", "chemical", "direction"), sep = "#-")
dats_out
dats_out$threshold %>% unique
devtools::test("run")
devtools::test(filter="run")
threshold
View(dats_si)
dats2 %>%
split(.$directionality_u)
temp1 <- dats2 %>%
split(.$directionality_u)
temp1[[1]]
temp1[[2]]
dats2 %>%
split(.$directionality_u) %>%
purrr::map2_df(., names(.), function(a, b) {
print(b)
thr_range <- threshold[[b]] %>% rlang::set_names(.)
thr_range %>%
purrr::map_df(function(x) {
dats2 %>%
tidyr::nest(-dduid, -repeat_id) %>%
dplyr::mutate(
input = purrr::map(data, create_curvep_input_temp, threshold = x, paras = other_paras)
)
}, .id = "threshold")
})
dats2 %>%
split(.$directionality_u) %>%
purrr::map2(., names(.), function(a, b) {
print(b)
thr_range <- threshold[[b]] %>% rlang::set_names(.)
thr_range %>%
purrr::map_df(function(x) {
dats2 %>%
tidyr::nest(-dduid, -repeat_id) %>%
dplyr::mutate(
input = purrr::map(data, create_curvep_input_temp, threshold = x, paras = other_paras)
)
}, .id = "threshold")
})
directionality
devtools::test(filter="run")
map_df
?map_df
devtools::test(filter="run")
devtools::test(filter="run")
source('Z:/hsiehj2/Projects/R_code/NIEHS/Rcurvep/R/curvep_excutions.R')
devtools::test(filter="run")
devtools::test(filter="run")
devtools::test(filter="run")
source('Z:/hsiehj2/Projects/R_code/NIEHS/Rcurvep/R/curvep_excutions.R')
devtools::test(filter="run")
devtools::test(filter="run")
devtools::test(filter="run")
devtools::test(filter="run")
devtools::test(filter="run")
devtools::test()
devtools::test(filter = "out")
dats <- zfishbeh
directionality <- 0
n_sample <- 2
vehicle_data <- NULL
dats <- dats %>%
dplyr::mutate(directionality = directionality) %>%
tidyr::unite(duid, endpoint, chemical, sep = "#-") %>%
dplyr::arrange(duid, concs)
# select the simulation type or calculate the median/percent response
dats <- select_type_simulation(dats, directionality, n_sample, vehicle_data)
#add a new column directionality_u
dats <- fill_directions(dats, directionality)
if (!rlang::has_name(dats, "mask")) dats$mask <- NA
dats2 <- dats %>%
tidyr::unite(dduid, duid, directionality_u, sep = "#-", remove = FALSE) %>%
dplyr::select(-duid)
threshold = c(15, 20)
other_paras = list(CARR = 20, TrustHi = TRUE)
thr_range <- threshold %>% rlang::set_names(.)
dats_si <- thr_range %>%
purrr::map_df(function(x) {
dats2 %>%
tidyr::nest(-dduid, -repeat_id) %>%
dplyr::mutate(
input = purrr::map(data, create_curvep_input,
threshold = x, paras = other_paras)
)
}, .id = "threshold") %>%
dplyr::mutate(threshold = as.numeric(threshold)) %>%
dplyr::select(-data)
dats_si
dats_si[1,]$input
dats_si %>% unnest()
iris %>% select(-in)
?vars
?one_of
dats_si[1,]$input[[1]]$concs
datas_si %>% mutate(x = map(input, function(x) max(x$concs)))
dats_si %>% mutate(x = map(input, function(x) max(x$concs)))
dats_si %>% mutate(x = map(input, function(x) (x$concs))
)
temp1 <- dats_si %>% mutate(x = map(input, function(x) (x$concs)))
temp1$x
temp1 <- dats_si %>% mutate(x = map(input, function(x) max(unlist(x$concs))))
temp1$x
temp1 <- dats_si %>% mutate(x = map_db(input, function(x) max(unlist(x$concs))))
temp1 <- dats_si %>% mutate(x = map_dbl(input, function(x) max(unlist(x$concs))))
temp1
dats_si %>% select(input)
dats_si %>% select(input) %>% mutate(concs = map(input, function(x) x$concs))
dats_si %>% select(input) %>% mutate(concs = map(input, function(x) unlist(x$concs)))
dats_si %>% mutate(temp = map(input, function(x) flatten_df(x$paras)))
dats_si %>% mutate(temp = map(input, function(x) flatten_df(x$paras))) %>% select(-input)
dats_si %>% mutate(temp = map(input, function(x) flatten_df(x$paras))) %>% select(-input) %>% unnest()
devtools::test()
dats_si %>% mutate(concs = purrr::map_dbl(input, function(x) unlist(x$concs))
)
dats_si %>% mutate(concs = purrr::map_dbl(input, function(x) unlist(x$concs)))
dats_si %>% mutate(concs = purrr::map_dbl(input, function(x) x$concs))
dats_si %>% mutate(concs = purrr::map(input, function(x) x$concs))
dats_si %>% mutate(concs = purrr::map(input, function(x) unlist(x$concs)))
devtools::test(filter = "out")
devtools::test(filter = "out")
devtools::test(filter = "out")
devtools::test(filter = "out")
data("zfishdev")
x <- zfishdev %>%
split(.$endpoint)
outd <- run_curvep_job(x[[1]],
directionality = 1,
n_sample = NULL,
threshold = c(15, 20),
other_paras = list(CARR = 20, TrustHi = TRUE))
summ <- extract_curvep_data(outd, "summary")
summ
summ[1,]$resps_in
summ[2,]$resps_in
summ[3,]$resps_in
summ[4,]$resps_in
library(Rcurvep)
# load required packages
library(Rcurvep)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
# load concentration response dataset
data("zfishbeh")
zfishbeh
# a pre-defined threshold for increasing response
threshold_up <- 15
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = NULL, threshold = threshold_up, other_paras = list(CARR = 20, TrustHi = TRUE))
# a pred-defined threshold for decreasing response
threshold_down <- 30
outd <- run_curvep_job(zfishbeh, directionality = -1, n_sample = NULL, threshold = threshold_down, other_paras = list(CARR = 20, TrustHi = TRUE))
# or combined
threshold_l <- list("1" = threshold_up, "-1" = threshold_down)
outd <- run_curvep_job(zfishbeh, directionality = 0, n_sample = NULL, threshold = threshold_l, other_paras = list(CARR = 20, TrustHi = TRUE))
n_sample_test <- 2
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = n_sample_test, threshold = 15, other_paras = list(CARR = 20, TrustHi = TRUE))
error <- rnorm(100, 0, 10)
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = 2, threshold = 15, other_paras = list(CARR = 20, TrustHi = TRUE), vehicle_data = error)
threshold_range <- seq(5, 10, by = 5) # usually seq(5, 95, by = 5)
n_sample_test <- 2 # usually for 1000
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = n_sample_test, threshold = threshold_range, other_paras = list(CARR = 20, TrustHi = TRUE))
outd <- run_curvep_job(zfishbeh, directionality = 1, n_sample = 100, threshold = 15, other_paras = list(CARR = 20, TrustHi = TRUE))
act <- extract_curvep_data(outd, "act")
act
# extract activity
act <- extract_curvep_data(outd, "act")
# calculate 95% confidence interval of BMC and hit confidence
result <- outd_ext %>%
group_by(endpoint, chemical, direction, threshold) %>%
mutate(POD = ifelse(is.na(POD), conc_highest, POD)) %>%
summarise(
BMC = median(POD),
BMCL = quantile(POD, 0.025),
BMCU = quantile(POD, 0.975),
hit_confidence = sum(hit)/n()
)
# extract activity
act <- extract_curvep_data(outd, "act")
# calculate 95% confidence interval of BMC and hit confidence
result <- act %>%
group_by(endpoint, chemical, direction, threshold) %>%
mutate(POD = ifelse(is.na(POD), conc_highest, POD)) %>%
summarise(
BMC = median(POD),
BMCL = quantile(POD, 0.025),
BMCU = quantile(POD, 0.975),
hit_confidence = sum(hit)/n()
)
result %>% select(-threshold)
in_concs <- extract_curvep_data(outd, "concs_in")
out_resps  <- extract_curvep_data(outd, "resps_out")
plotd <- list(in_concs, out_resps) %>%
reduce(inner_join) %>%
unnest() %>%
group_by(endpoint, chemical, direction, threshold, concs) %>%
summarize(resps = round(median(resps),2))
act_sum <- extract_curvep_data(outd, "summary")
act_sum
# extract summarized activity
act_sum <- extract_curvep_data(outd, "summary")
act_sum
# extract summarized activity
act_sum <- extract_curvep_data(outd, "summary")
act_sum %>% select(-threshold, -concs, -resps, -resps_in)
act_sum$resps
plot()
plotd
plotd %>% select(chhemical, concs, resps) %>%
filter(chemical == "Caffeine|58-08-2") %>%
unnest()
plotd %>% select(chemical, concs, resps) %>%
filter(chemical == "Caffeine|58-08-2") %>%
unnest()
outd
temp1 <- plotd %>%
filter(chemical == "Caffeine|58-08-2") %>%
unnest()
ggplot(temp1, aes(x = concs, y = resps)) + geom_point() + geom_line()
ggplot(temp1, aes(x = concs, y = resps)) + geom_point() + geom_line() + facet_wrap(~ endpoint)
plotd <- act_sum %>%
filter(chemical == "Caffeine|58-08-2") %>%
unnest()
p <- ggplot(plotd, aes(x = concs, y = resps)) + geom_point() + geom_line()
p + facet_wrap(~ endpoint)
data("zfishdev_act")
zfishdev_act
data("zfishdev_act")
acts <- zfishdev_act %>%
mutate(POD = ifelse(is.na(POD), conc_highest, POD))
outthres <- identify_basenoise_threshold(acts, endpoint = "endpoint", direction = "direction", chemical = "chemical", threshold = "threshold", potency = "POD", plot = FALSE)
outthres <- identify_basenoise_threshold(acts, endpoint = "endpoint", direction = "direction", chemical = "chemical", threshold = "threshold", potency = "POD", plot = TRUE)
library(Rcurvep)
library(Rcurvep)
data("zfishbeh")
threshold_range <- seq(5, 10, by = 5) # usually seq(5, 95, by = 5)
n_sample_test <- 2 # usually for 1000
outd <- run_curvep_job(zfishbeh,
directionality = 1, n_sample = n_sample_test,
threshold = threshold_range, other_paras = list(CARR = 20, TrustHi = TRUE))
sum_act <- extract_curvep_data(outd, "summary")
sum_json <- sum_act %>% jsonlite::toJSON()
sum_act_re <- sum_json %>% jsonlite::fromJSON()
dplyr::all_equal(sum_act, sum_act_re)
library(tidyverse)
sum_act <- extract_curvep_data(outd, "summary")
sum_json <- sum_act %>% jsonlite::toJSON()
sum_act_re <- sum_json %>% jsonlite::fromJSON()
dplyr::all_equal(sum_act, sum_act_re)
sum_act
sum_act_re
sum_act_re$threshold
mode(sum_act_re$threshold)
dplyr::all_equal(sum_act, sum_act_re)
sum_act <- extract_curvep_data(outd, "summary")
sum_json <- sum_act %>% jsonlite::serializeJSON()
sum_act_re <- sum_json %>% jsonlite::unserializeJSON()
dplyr::all_equal(sum_act, sum_act_re)
outd_json <- outd %>% jsonlite::toJSON()
outd_re <- outd_json %>% jsonlite::fromJSON()
outd_re
outd_re_sum <- extract_curvep_data(outd_re, "summary")
## verbose version ONLY (works)
outd_json <- outd %>% jsonlite::serializeJSON()
outd_re <- outd_json %>% jsonlite::unserializeJSON()
## test
outd_re_sum <- extract_curvep_data(outd_re, "summary")
outd_json <- outd %>% jsonlite::toJSON()
outd
outdoutd_re <- outd_json %>% jsonlite::fromJSON()
outd_re <- outd_json %>% jsonlite::fromJSON()
outd_re
outd_re$input
mode(outd_re$input)
names(outd_re)
names(outd_re$input)
extract_curvep_data(outd_re, "summary")
extract_curvep_data(outd_re, "act")
extract_curvep_data(outd, "act")
extract_curvep_data(outd, "summary")
?toJSON
outd_re <- outd_json %>% jsonlite::fromJSON()
outd_json <- outd %>% jsonlite::toJSON(auto_unbox = TRUE)
outd_re <- outd_json %>% jsonlite::fromJSON()
outd_re_sum <- extract_curvep_data(outd_re, "summary")
outd_json <- outd %>% jsonlite::toJSON()
outd_re <- outd_json %>% jsonlite::fromJSON()
outd_re %>% as_tibble()
outd_re %>% mutate(input = as.list(input))
mode(outd_re)
outd_re$input
mode(outd_re$input)
names(outd_re$input)
as.list(outd_re$input)
outd
outd_re <- outd_json %>% rjson:fromJSON()
install.packages("rjson")
outd_json %>% rjson:fromJSON()
?rjson
packrat::status()
rjson:fromJSON()
library(rjson)
rjson:fromJSON()
?rjson
fromJSON( "[true, false, null]" )
rjson::fromJSON()
outd_json %>% rjson::fromJSON()
outd_json %>% rjson::fromJSON()
outd_re_sum <- extract_curvep_data(outd_re, "summary")
outd_json <- outd %>% jsonlite::toJSON()
outd_re <- outd_json %>% rjson::fromJSON()
outd_re_sum <- extract_curvep_data(outd_re, "summary")
outd_re
outd_re %>% as_tibble()
outd_json <- outd %>% jsonlite::toJSON()
outd_re <- outd_json %>% jsonlite::fromJSON()
outd_re
outd_re$input %>% nest()
outd_re$input %>% list()
outd_re$input %>% tibble()
outd_re$input %>% mode
outd_re$input %>% names()
?Rcurvep
library(Rcurvep)
?Rcurvep
devtools::build()
?Rcurvep
devtools::install_github("moggces/Rcurvep", build_vignettes = TRUE)
?Rcurvep
?Rcurvep
?Rcurvep
data("zfishdev_act")
zfish2 <- dplyr::mutate(zfishdev_act, POD = ifelse(is.na(POD), conc_highest, POD))
result <- identify_basenoise_threshold(zfish2, endpoint = "endpoint", direction = "direction",
chemical = "chemical", threshold = "threshold", potency = "POD" )
library(Rcurvep)
data("zfishdev_act")
zfish2 <- dplyr::mutate(zfishdev_act, POD = ifelse(is.na(POD), conc_highest, POD))
result <- identify_basenoise_threshold(zfish2, endpoint = "endpoint", direction = "direction",
chemical = "chemical", threshold = "threshold", potency = "POD" )
result
?try
try(if (a != 1){stop("a")}; if (b!=2){stop("b")})
try(if (a != 1){stop("a")})
a <- NULL
try(if (a != 1){stop("a")})
a <- NA
try(if (a != 1){stop("a")})
try(if (a != 1){stop("a")})
try(if (a != 1){stop("a")}
if(b!=2) {stop("b")})
?asserthat
?stop
?expect
devtools::test()
devtools::test
?devtools::test
devtools::test(filter = "bmr")
